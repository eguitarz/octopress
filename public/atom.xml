<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dale Ma]]></title>
  <link href="http://dale-ma.heroku.com/atom.xml" rel="self"/>
  <link href="http://dale-ma.heroku.com/"/>
  <updated>2012-11-18T22:09:38+08:00</updated>
  <id>http://dale-ma.heroku.com/</id>
  <author>
    <name><![CDATA[Dale Ma]]></name>
    <email><![CDATA[dalema22@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[知識生產術]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/11/18/knowledge-generating-method/"/>
    <updated>2012-11-18T22:04:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/11/18/knowledge-generating-method</id>
    <content type="html"><![CDATA[<p>最近把勝間和代的 “新。知識生產術” 拿出來重翻，頗有領悟，決定記錄下自己的體會與想法。</p>

<h2>Google 化</h2>

<p>列出主題，隨時進行不同的關鍵字搜尋，主題應該具體些。此法可以透過不同面向觀察事物，甚而從中發掘新的搜尋目標。</p>

<h2>Give 5 法則</h2>

<p>分享才能讓知識深化，甚而獲得意外回響，可以透過寫部落格、聊天達成。（至於為何叫 Give &amp; Give &amp; Give &amp; Give &amp; Give，可能是作者為了強調施予才能獲得報酬吧）</p>

<h2>雙軌並行法則</h2>

<p>各種資訊一定要有備份，除了確保重要資訊不遺失外，臨時要搜尋也有兩個地方可以找。對於這點我頗有心得，因為有使用 Evernote 的習慣，我會把所有 note mail 一份至 Gmail。 另外有使用本機郵件軟體(Sparrow)， Gmail 的信件會有一份存在本機。pdf 等文件存在 Dropbox 和本機上。</p>

<p>資訊整理的工具很多，應該多多嘗試，留下對自己最有用的部分。將不同的工具組合，可能會產生意想不到的效用。作者認為資訊即金錢，能在有限時間內，將盡可能多的有用資訊內化，是爬向資訊時代金字塔的祕技。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Invisible scrollbar]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/11/06/invisible-scrollbar/"/>
    <updated>2012-11-06T20:00:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/11/06/invisible-scrollbar</id>
    <content type="html"><![CDATA[<p>You want to hide your scroll bar, but you still want to keep the scrolling ability. Then you&#8217;re gonna need an invisible scroll bar, this article might quite fit your needs.</p>

<p>There is no any javascript are required to make this work. The concept is dead simple. You need 2 divs. One is &#8220;wrapper&#8221;, another is &#8220;content&#8221;. You put your context into &#8220;content&#8221;, and there sure do will have a scroll bar there. Set the &#8220;content&#8221; size, and set the &#8220;wrapper&#8221; size, make the &#8220;wrapper&#8220;&#8216;s size a bit smaller than &#8220;content&#8221;. For more accuracy, which is &#8220;wrapper&#8220;&#8216;s width minus &#8220;content&#8221; scroll bar&#8217;s width.</p>

<p>Last step is set &#8220;wrapper&#8220;&#8216;s <code>overflow-x: hidden</code>, and <code>overflow-y: auto</code>. That&#8217;s all. Period.</p>

<p>For the code please refer to
<a href="https://gist.github.com/4024297">https://gist.github.com/4024297</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩網路金流絕不能不知的 PayPal IPN]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/10/29/paypal-ipn/"/>
    <updated>2012-10-29T08:05:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/10/29/paypal-ipn</id>
    <content type="html"><![CDATA[<p>PayPal 是個以安全著稱的金流服務商。 PayPal 的 IPN 也不是隨便就能搞定的通知協定。</p>

<h2>IPN 是什麼？</h2>

<p>當使用者透過你的網站在 PayPal 結帳完成時， PayPal 會 <code>POST</code> 通知回來，這就是 IPN (Instant Payment Notification)。</p>

<h2>實作原則</h2>

<p>IPN 驗證分為這些步驟：</p>

<ol>
<li>API / button 引導使用者在 PayPal 完成結帳。</li>
<li>PayPal <code>POST</code> 一串包含使用者與賣家資訊的訊息。</li>
<li>賣家 server 檢查完這串訊息無誤後，原封不動的 <code>POST</code> 回 PayPal。</li>
<li>PayPal 確認賣家回傳的訊息無誤後，<code>POST</code> 一個 <code>VERIFIED</code> 或 <code>INVALID</code> 的字串。</li>
</ol>


<p>關鍵在於要檢查 <code>2.</code> 裡面的訊息，避免商業詐欺。以下是必須檢查的項目：</p>

<ol>
<li><code>receiver_email</code> = gm_1231902686_biz@paypal.com 確認是賣家自己的 mail。</li>
<li><code>txn_id</code> = 61E67681CH3238416 這代表交易編號，有時候 PayPal會回傳兩個相同的交易編號，這時要避免重覆在賣家的 server 上認證，避免連續賣出兩次商品。</li>
<li><code>payment_status</code> = Completed 代表付款完成，可別讓人沒付完錢就送出產品 / 服務了。</li>
</ol>


<h2>參考資料</h2>

<p><a href="http://bit.ly/TodWRL">PayPal IPN 官方文件</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[松浦彌太郎的輕生活練習]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/10/28/light-life/"/>
    <updated>2012-10-28T10:11:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/10/28/light-life</id>
    <content type="html"><![CDATA[<p>你身上是否背着不必要的行囊？
你可以斷言，自己的生活輕鬆簡單嗎？</p>

<p>這兩句卷頭詞讓我想要一窺松浦彌太郎的著作“<code>放下包袱的輕生活學習</code>”。這本書不是教你如何收納物品把家裡整理的井然有序，這本書著重在心靈的層次衍生至對於人生的省思。</p>

<p>剛開始講珍惜，珍惜每次和人見面的機會，珍惜每次打招呼的片刻，珍惜獨自相處的時機，培養蹦蹦跳跳的工作態度。</p>

<p>順著與人相處的話題，進入到工作上的建議。觀察、推理、溝通，是他認為職場上發光發熱的利器。他也倡導工作與生活融合在一起，大方的將私底下的一面和同事分享。</p>

<p>松浦彌太郎也談到了反思的力量，他過去是個渾渾噩噩過生活的失敗者。他思考着究竟是什麼力量改變了他，讓他現在能夠活的亮眼。</p>

<p>最後，他提出了人生資產，一種無形的資產。每個人都該好好列出自己的“人生資產”，善於溝通、喜歡交朋友、學習力強…等。多花時間投資於自己<code>擅長的</code>，少碰那些就算投資也不會有太大成效的非專精特長。</p>

<p>松浦先生某種層面上和我有些相似，看了他的書後令我心生共鳴。我也希望能和他一樣，趁著年輕到外面看看自己的能耐。他 20 多歲時流浪到美國，過著餐風露宿的生活。初衷是找尋自由，最後也讓他找到了自己對於自由的答案。</p>

<p>現在這個年紀的我，還有太多的疑惑，還有太多的猜想，對於人生充滿了不確定。理出肉眼看不見的輕便行囊，往前走，看來是個必然的下一步了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From the first sun shine to the last moon light]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/10/27/first-sunshine/"/>
    <updated>2012-10-27T10:49:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/10/27/first-sunshine</id>
    <content type="html"><![CDATA[<p>You know you&#8217;re not gonna sit there and wait to die.</p>

<p>You know here is not the last place for you.</p>

<p>You got a big dream to bring up.</p>

<p>You got a strong plan to run up.</p>

<p>All you need is a meditation. A deep, slow talk to yourself.</p>

<p>If the 50% of you agree with yourself, than go for it.</p>

<p>Exhaust all your energy and do it, from the first sun shine to the last moon light.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[模擬城市，模擬創業]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/10/11/simcity/"/>
    <updated>2012-10-11T11:29:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/10/11/simcity</id>
    <content type="html"><![CDATA[<p>最近，突然發現約莫十年前的電腦遊戲模擬城市，與創業的高度關聯。模擬城市是一款從無到有建造城市的遊戲。遊戲的目的就是永續發展一座城市，沒有所謂的勝利條件。你可能會因為缺乏資金或是喪失興趣退出遊戲，遊戲過程中也會出現大大小小的災難考驗你的應變能力。不覺得跟創業頗神似？</p>

<h2>願景規劃</h2>

<p>你可以一開始就把你理想的城市藍圖規劃好，包含每條水管，每塊區域。但就跟創業一樣，環境變化沒有任何理論、任何人可以做出準確預測。你很難拿捏今天規劃好的道路，明天會不會不堪使用。如果一開始就花大錢蓋高速公路，沒人用的話不僅天天賠錢，還要花心思重新規劃。</p>

<p>創業，準確一點來說，精實創業，也根基於小而美的理念。在你發展出 Minimum Viable Product前，一切從簡，砸大錢一次到位，只是讓自己走在搖搖欲墜的鋼索，一旦摔落就永不翻身。</p>

<h2>設計測試實驗</h2>

<p>在模擬城市裡，你想要發展一塊新區域，比較好的做法是先挪出一小塊土地，嘗試一些實驗性質的設計，像是新的地鐵系統等等。萬一失敗了，可以快速地重新再來。成功了，就能依照小規模時的設計，慢慢擴張。</p>

<h2>找資金</h2>

<p>一開始你會有一筆錢，如果你是選擇困難模式，這筆錢會很少。你的任務是找出獲利模式，在那之前，並不會有太大的營收。如果你很早引入資金（蓋賭場、軍事基地），他們可能會慢慢成為你城市的毒瘤，趕跑你的市民。某種程度和唯利是圖的創投有幾分神似。</p>

<p>必須要耕耘一段時間，讓城市發展到一定程度以後，才會有可靠的穩定營收，所以初期的每一個決策都很重要，馬虎不得。</p>

<h2>你不是孤單一人</h2>

<p>遊戲裡有衛星城市的設計，相鄰的城市可以分享資源，譬如賣出電力、水資源。或是提供工作機會。創業你不必單打獨鬥，你可以和別人組成團隊，或和其他公司異業結盟。</p>

<p>在遊戲裡的設計，很難只靠一個城市就發展出高科技、高人口的都會，還是需要聯合大大小小不同特色的城市才辦得到。</p>

<h2>現實中失敗了很難重來，但這裡很容易</h2>

<p>模擬城市可以當做一種創業模擬器，訓練怎樣掌控資源，怎樣面對問題和提出解決方案。遊戲難度不高，建議調整成困難模式。剛開始可能很容易賠錢， Pivot 幾次後，就能慢慢上手了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Put your photos together]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/10/09/posterino/"/>
    <updated>2012-10-09T10:27:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/10/09/posterino</id>
    <content type="html"><![CDATA[<p>I found <a href="http://www.mycookingdiary.com/">My cooking Diary</a> recently. It shows a amazing present of photos, makes me really wondering the software it uses.</p>

<p>It is <a href="http://zykloid.com/posterino">Posterino</a>, which put many photos into one frame. It&#8217;s not the newest thing, but it&#8217;s delicate and useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iwanttowriteasoftware]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/09/10/iwanttowriteasoftware/"/>
    <updated>2012-09-10T13:27:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/09/10/iwanttowriteasoftware</id>
    <content type="html"><![CDATA[<p>標題看來具體，但內容其實是根據 Seth Godin 的 <a href="http://www.ted.com/talks/lang/en/seth_godin_on_sliced_bread.html">How to get your ideas to spread</a> 和 37 Signals 的創業故事有感而發的想法。</p>

<p>寫軟體，桌面軟體、手機軟體、平板軟體、網路軟體，任何種類我都不排斥。我只想寫對我有用，也有人用的軟體。對我有用這件事很容易辦到，從生活中的瑣事歸納出一套固定邏輯，就可以變成一套軟體。但該怎樣確保寫出來的軟體是對別人也有用，他們看了眼睛會為之一亮，會拍案叫絕，會愛不釋手？</p>

<h2>扁平鐘型市場</h2>

<p>我們都知道常態分佈，以 x 軸為會買你東西的人，以 y 軸為人數，畫出來的圖形就像一鼎鐘一樣。鐘的左邊和右邊人數稀少，都是些怪咖，是屬於先知先覺者。鐘型的中間佔了 80% 的面積，絕大多數正常人都落在這塊。</p>

<p>邏輯告訴我們要針對那 80% 的正常人開發產品，他們要甜的就加糖，要鹹的就加鹽，要辣的就加個辣。最後你的產品腫脹不堪，美其名是“一卡在手，萬事無窮”，實質是“不三不四，嗚呼哀哉”。</p>

<p>不，身為一個非正常人(會想自己開發產品的絕對是怪咖)怎會想開發正常的產品？開發的初衷是為了自己，為何要開發出一個每幾小時就會跳出藍畫面的詭異軟體來取悅大眾？</p>

<h2>怪咖的好處</h2>

<p>我們應該針對那 20% 的怪咖開發產品，因為你也是怪咖之一。這麼做的好處在於你可以主導產品的功能，因為它是專為你設計的。另一個最大的好處是，你省了很多資源。你不必為了一個鱉腳功能，多寫 1000 行程式碼，也多出了一周來做更值得的功能。</p>

<p>你不比擔心做出來的東西功能太少沒人要，好的產品只要有一樣功能切中人心，就能受歡迎。還記得鐘型曲線嗎？事實上，鐘型曲線已經默默地往外擴散了。怪咖愈來愈多，傳統的 80 / 20 法則，將漸漸不適用在這上面。怪咖的其他特色是，愛分享。你的產品真的符合他們的需求，自然就有機會促成一波病毒式行銷，你甚至不需出半毛廣告費。</p>

<h2>我想在這樣的環境下寫軟體</h2>

<p>適當的限制有時侯能產出出色的成果。我不需要開發怪物軟體，所以程式碼自然就不多。限制功能數量是不錯的選擇。由於軟體具高度專一性，限制開發人員數量，也可有效避免意見發散。最後，我想限制的是時間，給自己一個死期，時間到了除非有嚴重的問題，否則一率把產品送出去。</p>

<p>限制重重是種自我要求（或者你也可以解讀為自虐），但你看過微軟做出什麼令人愛不釋手的產品了嗎？（這問題或許因人而異，我承認）不然你以為梵谷為何沒事要自割耳朵？！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use pdf.js to make a PDF thumbnail]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/09/02/use-pdf-dot-js-to-make-a-pdf-thumbnail/"/>
    <updated>2012-09-02T08:52:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/09/02/use-pdf-dot-js-to-make-a-pdf-thumbnail</id>
    <content type="html"><![CDATA[<p>If you want to make a PDF cover image, what will you do? Grab a monster library just only for making thumbnail? No, you don&#8217;t. It&#8217;s dead easy to go with <a href="https://github.com/mozilla/pdf.js">pdf.js</a>.</p>

<p>cavas.html.haml</p>

<pre><code>!!!
%html
  %head
    %script{:src =&gt; "javascripts/pdf.js", :type =&gt; "text/javascript"}
  %body
    :javascript
      'use strict';

      PDFJS.workerSrc = "javascripts/pdf.js";
      $(document).ready(function() {
        PDFJS.getDocument('iperl.pdf').then(function(pdf){

          pdf.getPage(1).then(function(page) {
            var viewport = page.getViewport(0.5);
            var canvas = document.getElementById('box');
            var ctx = canvas.getContext('2d');
            canvas.height = viewport.height;
            canvas.width = viewport.width;

            var renderContext = {
              canvasContext: ctx,
              viewport: viewport
            };

            page.render(renderContext).then(function(){
              //set to draw behind current content
              ctx.globalCompositeOperation = "destination-over";

              //set background color
              ctx.fillStyle = "#ffffff";

              //draw background / rect on entire canvas
              ctx.fillRect(0,0,canvas.width,canvas.height);
              var img = canvas.toDataURL();
              $("#thumbnail").html('&lt;img src="'+img+'"/&gt;');
            });

          });
        });

      })
  #thumbnail
  %canvas#box{:style =&gt; "border:1px solid black;background-color: white;"}/
</code></pre>

<p>The result contains an image and a canvas, quite simple, isn&#8217;t it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How do I train my rails skill?]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/08/26/how-do-i-train-my-rails-skill/"/>
    <updated>2012-08-26T07:11:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/08/26/how-do-i-train-my-rails-skill</id>
    <content type="html"><![CDATA[<p>To master a skill, you have to pay 10000 hours in, then you will be the guru in that field.</p>

<p>I believe repeating is the best way to master something well. I practice CRUD almost everyday. How? by building a todo list web site.</p>

<p>It sucks so much time at beginning, but once you are really familiar with Rails, you can create one less than 10 minutes. Such as <a href="http://www.youtube.com/watch?v=5aaHm9VImVE&amp;t=4m0s">this guy</a>, his name is Jserv, he can write an OS prototype in 15 minutes!</p>

<p>In addition to repeating, another thing is tool. You should prepare some tools to increase your speed on developing. Here are some tools worth to try:</p>

<ul>
<li><a href="http://www.sublimetext.com/2">Sublime 2</a> or <a href="http://www.vim.org/">VIM</a></li>
<li><a href="http://livereload.com/">Livereload</a>, auto refreshes your browser, it helps you to focus on your code.</li>
<li><a href="http://inductionapp.com/">Induction</a>, a polyglot database client.</li>
</ul>


<p>Welcome to tell me if you know any goodies to share ~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy static site on heroku]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/08/06/deploy-static-site-on-heroku/"/>
    <updated>2012-08-06T15:57:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/08/06/deploy-static-site-on-heroku</id>
    <content type="html"><![CDATA[<h2>When you just want simple… on heroku</h2>

<p>Sometimes you just want to deploy a simple web which contains one or two static pages, how would you do? You don&#8217;t want to build a rails project merely to serve a couple of static pages. Here&#8217;s a quick guide for you~!</p>

<h2>Environment</h2>

<p>You should not use cedar stack, that&#8217;s not friendly for static sites. (You need to install some gems by yourself, and do some hacks…) bamboo is a good start point.</p>

<pre><code>heroku create --stack bamboo-ree-1.8.7
</code></pre>

<h2>File structure</h2>

<p>You should create a public folder at root. Put your index.html and stylesheet / js / img folder into &#8220;public&#8221; folder.</p>

<h2>Config</h2>

<p>Last, create a simple config to tell rack middleware how to render the static files…</p>

<pre><code>use Rack::Static, 
:urls =&gt; ["/stylesheet", "/img", "/js"],
:root =&gt; "public"

run lambda { |env|
[
    200, 
{
  'Content-Type'  =&gt; 'text/html', 
  'Cache-Control' =&gt; 'public, max-age=86400' 
}, File.open('public/index.html', File::RDONLY)
] 
</code></pre>

<p>Then you can commit and push the site to heroku. Here are the official guides if you still do not understand…</p>

<ul>
<li><p><a href="https://devcenter.heroku.com/articles/static-sites-on-heroku">Static Sites with Ruby on Heroku/Bamboo</a></p></li>
<li><p><a href="https://devcenter.heroku.com/articles/bamboo">The Badious Bamboo Stack</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember.js practice: Github tool]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/08/02/emberjs/"/>
    <updated>2012-08-02T15:24:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/08/02/emberjs</id>
    <content type="html"><![CDATA[<h1>Why would I build this tool?</h1>

<p>Simply speaking, I want to practice Ember.js. Many guys practicing their first app by doing th Todo list. But I wanna try something different. So I picked Github as my target.</p>

<h1>Ember.js, what?</h1>

<p>Ember.js is a javascript web framework comes from the open source project <a href="http://sproutcore.com/">SproutCore</a>, which Apple was contributed greatly in.</p>

<p>Ember.js structured in MVC pattern, with a built-in template engine. Comparing to Backbone.js (Another javascript framework), it&#8217;s simpler to developers. Backbone.js provides flexibility but you need to write codes by yourself in most cases. Ember.js, on the opposite, might not as flex as Backbone.js is, but it contains already-built structures.</p>

<h1>Functions</h1>

<p>The interface will be pretty simple, a search input field, a recent search results, and the repositories of the searched user. You type the user name in the search box and send the request, I return the repositories of the user.</p>

<h1>First things first</h1>

<p>I have to say I did not start it all by myself. First I browse Andy Matthews&#8217; <a href="http://www.adobe.com/devnet/html5/articles/flame-on-a-beginners-guide-to-emberjs.html">Flame on! A beginner&#8217;s guide to Ember.js</a>. It&#8217;s a simple twitter app built on ember.js. I &#8220;borrowed&#8221; his code and made some modifications. If you need to learn everything from scraps, his guide is quite a good start point. I will not cover too many basic stuffs here.</p>

<h1>On the way!</h1>

<p>It&#8217;s easy to create Ember app, only one line to type:</p>

<pre><code>App = Em.Application.create();
</code></pre>

<h1>Model</h1>

<p>I created a User object to store searched user</p>

<pre><code>App.User = Em.Object.extend({
    name: null,
    avatar: null
});
</code></pre>

<p>And a Repository object to store the Github repository</p>

<pre><code>App.Repository = Em.Object.extend({
    language: null,
    name: null,
    updated_at: null,
    description: null
});
</code></pre>

<p>Here, I store two classes in App (App.User and App.Repository). Upper case of first letter implies it&#8217;s a class.</p>

<h1>View</h1>

<p>Ember provides some views, we can just extend it for our use.</p>

<pre><code>App.SearchTextField = Em.TextField.extend({
    insertNewline: function(){
        App.repositoriesController.loadRepositories();
    }
});
</code></pre>

<p>insertNewline is a pre-defined method, every time users push enter in the search field triggers it.</p>

<p>The TextField extended from TextSupport, for more pre-defined TextSupport methods, you can check <a href="http://docs.emberjs.com/#doc=packages_ember-handlebars_lib_controls_text_support.js&amp;src=true">Ember&#8217;s API for TextField</a>.</p>

<h1>Controllers</h1>

<p>Controller plays an important role, they control which view to show, and which model to access.</p>

<h2>repositoryController</h2>

<p>&#8220;username&#8221; property binds to the search TextField. To bind a property from handlebars, use &#8220;valueBinding&#8221;. For example:</p>

<p>placeholder is html5 feature, which use to show default value of the input. While binding the property, every changes in the front will updates the property in the background.</p>

<p><code>loadRepositories()</code> search the user&#8217;s repositories from Github API, then push into its own array (namely, &#8220;content&#8221; property).</p>

<h2>recentUsersController</h2>

<p>Hence it extend from <code>ArrayController</code>, you cans use <code>this.pushObject()</code> and <code>this.removeObject()</code> to manipulate the users array.</p>

<p>Another point to notice is &#8220;view.context&#8221;. Let&#8217;s look at <code>removeUser()</code> method. In the front end, a hyper link will sends a view to the back end.</p>

<pre><code>&lt;a href="#" title="remove" \{\{action "removeUser" target="App.recentUsersController"\}\}&gt;X&lt;/a&gt;
</code></pre>

<p>This line is wrapped by <code>and</code>, the return value will be the iterated view of recentUsersController, which is, A view object which wraps a User model. To obtain the User object, you use view.context to achieve it.</p>

<h1>Run it up</h1>

<p>It&#8217;s dead easy to run this tool, you have to put it under a http server. Why? some browsers such as Chrome cannot access https protocol via local files.</p>

<p>Once you&#8217;re ready, just open the index.html and try. For the complete codes you can <a href="https://github.com/eguitarz/ember-github-example/zipball/master">down load it from Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[放空後其實更清醒]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/07/04/newlife/"/>
    <updated>2012-07-04T09:09:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/07/04/newlife</id>
    <content type="html"><![CDATA[<p>剛剛結束了半個月的旅行，途中對於未來的路有了更深層的思考。旅行途中我看了 jayonsoftware 的部落格，他每天 4 點半起床，一天只花四小時在寫程式上，同時他還冥想，讓自己的思緒更清楚，<a href="http://www.jayonsoftware.com/home/2012/1/9/daily-routine-of-a-4-hour-programmer.html">整篇文章</a> 給了我很大的啓發，讓我決定也要找找適合自己的生活規律。</p>

<p>首先，我決定學習冥想，初步的 google 結果，發現沒想象中那麼難。冥想能讓腦袋放空，產生適合學習的 Alpha 波。先以最舒服的姿勢坐著，眼睛不一定要閉上，然後慢慢深呼吸，腦袋不要想任何事情。一段時間後（約莫15分鐘）會發現你的心沒有那麼煩躁，大腦也更清醒了。每天起床做一次冥想，幾個月後對心靈會有很大的助益，遇到重大的事情也能泰然的處理。</p>

<p>除了冥想，我也決定增加閱讀的時間，週一到週五閱讀大量的技術書籍，周六日則以非技術書籍為主。同時每年要多學習一種程式語言和人類語言。</p>

<p>平常生活規劃改成 5 ~ 6 點起床、冥想、早餐、接收資訊、寫作。到公司後開始寫程式、學習技術。晚上則盡量11點前上床，將隔天要做的事記下。</p>

<p>如果你也正往高效率的生活邁進，歡迎和我分享。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[邊旅行邊 hacking]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/06/22/travelhacking/"/>
    <updated>2012-06-22T21:38:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/06/22/travelhacking</id>
    <content type="html"><![CDATA[<p>這篇文章是在等待轉機時打的，在這之前我從台北飛到上海住了一夜，又從上海飛到溫哥華，現在只剩意志力能讓雙手在鍵盤上敲打，如果把手停下一分鐘大概就會就此昏睡過去。</p>

<p>不論是工作還是自我學習，我不喜歡在資源太充足的情況下做事。如果有某種程度上的限制，我認為能讓自己更珍惜眼前的資源，進而好好善用他們。聽起來有點自虐，但這是 hacking 的精髓所在，如果你的辦公桌可以擺下三台桌機加一台筆電，如果你的時間無窮無盡，就像拿了遙控器對現實按了暫停一樣，把你想做完的事都做完以後再解除暫停，難道這樣效率就會比較高？不，你會因為過度安逸，而疏於你本來想做的事。（想想你六日碰的程式碼比較多還是平日上班時？）</p>

<p>趁我有15天內飛半個地球的行程，打算在15天內利用空閑時間學習和 coding 。當然，會有大部分時間都在交通工具上渡過，同時網路功能將會受到限制。聽起來很糟，但我發現這段時間我效率超好。</p>

<p>我在上飛機前會先把一些網頁資料開在瀏覽器裡，上飛機的時候有空就會拿出來看。等着過海關的時候，我會盤算我的程式流程要怎麼走，資料庫裡要放些什麼表格。飛機上遇到氣流不穩，我仍然拿著筆電寫著程式，反正我哪也不能去（我的筆電有換上SSD，所以不擔心被機身震動影響）。</p>

<p>目前為止，我蠻滿意這段旅程的工作產出和學習成效。接下來要飛到歐洲搭遊輪，我不打算在遊輪上買貴死人的網路，所以接下來會準備個 7 天份的閱讀資料，上去找時間研讀。在閱讀的你，如果這假日有空，不妨去個沒有網路的咖啡廳，來場“資源受限”的 coding 下午茶試試。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日定時寄信 in Rails 3]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/06/17/railsscheduler/"/>
    <updated>2012-06-17T16:43:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/06/17/railsscheduler</id>
    <content type="html"><![CDATA[<p>先前研究了如何在 <a href="http://dale-ma.heroku.com/blog/2012/06/12/rails-mail/">rails 3 裡寄 e-mail</a>，後來想要設定成類似 crontab 的方式，每天可以自動寄信出來。</p>

<p>於是開始 google &#8220;rails scheduler&#8221;，除了火車時刻表以外，發現了一個簡單的 gem - <a href="https://github.com/jmettraux/rufus-scheduler">Rufus Scheduler</a>。我不需要有 queue 之類的進階功能，我要的很簡單，只要每天可以寄出一封信就可以了。</p>

<p>用了之後發現一切真是該死的簡單，如果你已經有設定好 Mailer，不用 3 分鐘就可以搞定一切！</p>

<h2>步驟</h2>

<h3>安裝 Rufus Scheduler</h3>

<p>設定 Gemfile</p>

<pre><code>gem 'rufus-scheduler'
</code></pre>

<p>安裝</p>

<pre><code>bundle install
</code></pre>

<h3>設定 initializer</h3>

<p>建立 &#8230;/config/initializers/task_scheduler.rb</p>

<pre><code>scheduler = Rufus::Scheduler.start_new

scheduler.every("10s") do
  UserMailer.convert_result.deliver
end
</code></pre>

<p>設定為每 10 秒寄一次信是為了要可以快速的確認是否 work 。 <code>UserMailer</code>應該換成自己的 Mailer 。</p>

<p>接著可以改成每天固定時間寄信，這裡設定為每天早上 6 點。</p>

<pre><code>scheduler.cron("0 6 * * *") do
   UserMailer.convert_result.deliver
end
</code></pre>

<p>接下來你可以開始你的寄信服務了，不過請別寄垃圾信過來。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 3 如何寄 gmail]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/06/12/railsmail/"/>
    <updated>2012-06-12T17:39:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/06/12/railsmail</id>
    <content type="html"><![CDATA[<p>設定 web 的寄信模組從以往的經驗都不是很輕鬆的事，沒想到在 Rails 3 裡可以不花太多時間就搞定。</p>

<h2>前置作業</h2>

<ul>
<li>一個 gmail 帳號</li>
</ul>


<h2>步驟</h2>

<h3>撰寫設定檔</h3>

<p>在 YOUR_PROJECT/config/initializers 下建立 setup_mail.rb 的文件。</p>

<p>setup_mail.rb</p>

<pre><code>ActionMailer::Base.smtp_settings = {
  :address              =&gt; "smtp.gmail.com",
  :port                 =&gt; 587,
  :domain               =&gt; "YOURDOMAIN.com",
  :user_name            =&gt; "YOUR_GMAIL_ACC",
  :password             =&gt; "YOUR_GMAIL_PWD",
  :authentication       =&gt; "plain",
  :enable_starttls_auto =&gt; true
}
</code></pre>

<h3>建立 mailer</h3>

<pre><code>rails g mailer my_mailer
</code></pre>

<p>將會在你的 app/mailers 下建立一個 my_mailer.rb。</p>

<p>my_mailer.rb初始會長這樣</p>

<pre><code>class MyMailer &lt; ActionMailer::Base
  default :from =&gt; "from@example.com"
end
</code></pre>

<p>改成</p>

<pre><code>class MyMailer &lt; ActionMailer::Base
  def send_mail
    mail(:to =&gt; "YOUR_CLIENT@gmail.com", :subject =&gt; "Bonjour", :from =&gt; "YOUR_GMAIL@gmail.com")
  end
end
</code></pre>

<h3>撰寫郵件內容</h3>

<p>/app/views/my_mailer 下新增 send_mail.text.erb</p>

<p>send_mail.text.erb</p>

<pre><code>Hello world!
</code></pre>

<h3>呼叫寄信函式</h3>

<p>你已經設定完所有要寄信的部分了，接著在要寄信的 Controller 裡 call <code>MyMailer.send_mail.deliver</code> 即可</p>

<p>xxx_controller.rb</p>

<pre><code>def welcome
  MyMailer.send_mail.deliver
end
</code></pre>

<h3>進階</h3>

<p>設定好寄信功能在 rails 3 裡很省事，其它進階的功能項增加附件之類的也不困難，可以參考 <a href="http://asciicasts.com/episodes/206-action-mailer-in-rails-3">Ascii casts</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[截圖、註解，LittleSnapper]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/05/09/littlesnapper/"/>
    <updated>2012-05-09T23:57:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/05/09/littlesnapper</id>
    <content type="html"><![CDATA[<p><img src="http://assets3.realmacmedia.com/websites/_resources/littlesnapper/images/littlesnapper_header.jpg" alt="littlesnapper" /></p>

<p>死寂的夜晚，我乘著浪板在網路上來來回回搜索，計劃着下一個私人旅行專案。瀏覽器裡的分頁隨著新的發現慢慢增加，我意識到必須要開始把有用的資訊用圖片儲存。 Mac 內建了抓圖快捷鍵，可以把截取的圖片存在桌面上。但是我常常忘記截圖的熱鍵，另外如果需要在圖上註解，我需要開啟圖片修改軟體，載入、修改存檔。一定有更好用的工具可以幫助我完成這些冗活，於是我將搜尋的目標換成截圖軟體，兀自開始下一輪的搜尋。</p>

<p><img src="images/littlesnapper.png" alt="littlesnapper" /></p>

<p><a href="http://www.realmacsoftware.com/littlesnapper/">LittleSnapper</a></p>

<p>LittleSnapper 是我第一個找到的軟體。雖然是付費軟體，但容易上手。 它有兩項特點讓我決定用它：</p>

<h2>滑鼠點擊選單即可截圖，不必再查快捷鍵</h2>

<p><img src="images/littlesnapper-menu.png" alt="menu" /></p>

<p>有時候我需要截取一整個視窗的圖片，有時候我需要擷取某一小區塊的圖片。 LittleSnapper 將這些功能整合在工作列的選單內，可以依需要選擇。特別的是還有類似照相機的延遲拍照，在某些特殊用途上很方便。(就像我截的這張 LittleSnapper 工作列圖示，可以先點延遲拍照，再將工作列打開。)</p>

<h2>截圖可註解，不用另外開圖像程式</h2>

<p>  <img src="images/littlesnapper-comment.png" alt="menu" />
  我習慣在旅遊地圖上作註解， LittleSnapper 讓我可以輕鬆的打上註解，加上指標。還有裁切功能也很常用，可以裁切重要的部分存檔。</p>

<h2>其他功能</h2>

<p>  LittleSnapper 本身就是一個圖像儲存程式，你也不需要擔心去哪找圖片，需要的時候將圖片輸出即可。其他的功能包含幫你傳擋到 Web 或 FTP server上、將你的圖片按時間分類等，對常需要整理資料的人來說應該助益不小。</p>

<h2>購買資訊</h2>

<p>  <a href="http://www.realmacsoftware.com/littlesnapper/">LittleSnapper</a> 在 <a href="http://itunes.apple.com/us/app/littlesnapper/id403489261?mt=12&amp;ign-mpt=uo%3D4">App Store</a> 上有販賣 ( $39.99 )。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Image injection 輕鬆檢查身份認證]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/04/29/image-injection/"/>
    <updated>2012-04-29T17:18:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/04/29/image-injection</id>
    <content type="html"><![CDATA[<h2>難道想吃飯一定要學會種稻？</h2>

<p>最近在做網站外認證的事情，也就是在別人的網頁上要認出使用者的身份，除了拿刀子要別人把原始碼拿來讓我加認證程式碼外，還有更好的選擇。無論如何勢必要連回自己的網站做認證，你可以洋洋灑灑的寫個 Ajax 認證機制，甚至還實作了 OAuth 2.0 。喔，不，我是懶惰工程師，費工的事我可不愛幹。</p>

<p>我的目標只是要在別人的網站背後開一個通道，這個通道可以讓我知道使用者是否已經登入我的網站，並且使用者可以利用這個通道向我發送指令。</p>

<p>有個妙招可以做到上述這件事，透過使用者點擊 bookmark 注入 javascript 和圖片到他正在瀏覽的網頁即可。</p>

<h2>圖片，你傳遞資訊的好朋友</h2>

<p>瀏覽器對圖片的限制很寬鬆，當讀取網頁時，也同時在做非同步的圖片讀取。這些圖片可以來自其它網站，而其它網站接到請求時可以根據使用者是否擁有 session 決定要回傳什麼圖片。（這不就很巧妙的做到 ajax 認證會做的事了？）</p>

<p>當目標網頁接收到圖片時，我們可以注入 javascript 讀取圖片的類型而知道使用者是否已經擁有自身網站的 session。</p>

<p>整個過程圖片是就像來源網站的代理人，使用者向來源網站請求圖片，來源網站將資訊透過圖片表達。最簡單的方式可以依據使用者是否登入，回傳寬度為 1 或 2 的空白圖片。</p>

<h2>怎麼做？</h2>

<h3>製作一個可以注入 javascript 的書籤。</h3>

<pre><code>javascript:(function(){MY_SCRIPT=document.createElement('SCRIPT');MY_SCRIPT.type='text/javascript';MY_SCRIPT.src='http://127.0.0.1:3000/test.js';document.body.appendChild(MY_SCRIPT)})();
</code></pre>

<p><code>my_script.js</code>是用來 inject 圖片和讀取圖片寬度的 javascript 。</p>

<h3>製作 my_script.js</h3>

<pre><code>document.body.innerHTML += '\&lt;innerHTMLmg id="MY_IMG" src="path/to/my/image" style="display:none;"&gt;';
</code></pre>

<p>現在當使用者瀏覽網站時，點了我們的 bookmark 就會自動注入圖片到當下的網站，由於圖片是隱藏的，使用者並不會發現。</p>

<h3>加入圖片讀取機制</h3>

<pre><code>在 my_script.js 加上

read_img = function() {
  while (!document.getElementById("MY_IMG")) {}
          var w = document.getElementById("MY_IMG").width;

          if (w &gt; 0) {
            if          (w == 1) {
              alert("User has logged in. width = " + w );
            } else {
                            alert("Please login, width = " + w);
            }
          }
}
read_img();
</code></pre>

<p>將圖片的路徑設定好後，可以在任意的網頁點選書籤，會有一個對話框檢查注入的圖片寬度，程式碼裡 width = 1 代表已經登入，其他則尚未登入。</p>

<p>至於動態產生圖片的部分，可以參考 <a href="http://www.google.com.tw/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0CC4QFjAA&amp;url=http%3A%2F%2Fwww.w3.org%2FGraphics%2FGIF%2Fspec-gif89a.txt&amp;ei=XgadT_S6CqXnmAWPm5TODg&amp;usg=AFQjCNGkPzr6fu-V-T05Uzu6aCxGaZ_iRA&amp;sig2=BNcPCLS_4sFTBpJiAQ8eIg">GIF spec</a> 自己生一個假的 gif 圖片。</p>

<p>要傳送指令的話，也只需在請求圖片時加上 get 參數即可。（例如： &lt;img src=&#8221;MY_IMG&#8221; src=&#8221;path/to/my/image/image.gif?cmd=123&#8221;）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[文字萃取機]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/04/18/text-extract/"/>
    <updated>2012-04-18T22:01:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/04/18/text-extract</id>
    <content type="html"><![CDATA[<h2>什麼是文字萃取？</h2>

<p>我們每天都要瀏覽很多網頁，每張網頁所含的內容其實有2成以上不是我們在乎的。所以開始有人想把重要的內容從網頁中萃取出來，也就是所謂的 text extracting 。文字萃取有很多方法，其中我比較感興趣的只有兩種，阿基米德法和模擬城市法。（對，名字是我亂取的。）</p>

<h2>阿基米德法</h2>

<p>html 是以 tag 所組成的，將每行 html 所含的文字除上 tag 數，每行可以得到一個比值，再把比值較輕的tag移除（文字含量較少）。跟阿基米德以比重來測量皇冠的真假原理一樣。</p>

<p><img src="http://tomazkovacic.com/blog/wp-content/uploads/2011/03/random17-300x166.png" alt="" /></p>

<p>這是以行數為 x 軸，以比重為 y 軸所得到的對應圖。至於怎樣的數值才算最好，那就真的是一門學問了，每張網頁內容都不盡相同，一不小心就會刪掉太多或是保留太多。</p>

<h2>模擬城市法</h2>

<p>這是將所有 tags 的實際位置算出來，擷取位在中間的區塊。這方法實作上稍難，遇上複雜的網頁結構也會不容易判斷。</p>

<p><img src="http://tomazkovacic.com/blog/wp-content/uploads/2011/03/VIPS-300x270.jpg" alt="" /></p>

<h2>以 Ruby 開發的文字萃取 gem</h2>

<ul>
<li><a href="https://github.com/iterationlabs/ruby-readability">ruby-readability</a></li>
<li><a href="https://github.com/eguitarz/juice">juice</a></li>
</ul>


<p>兩種都是以阿基米德法為基礎所發展，個人偏好 Juice ，因為它可以取出比較完整的內容，據說 juice 的作者是因為不滿意前者的精準度而開發的。（謠言可信度很高，因為我就是作者）</p>

<h2>Juice</h2>

<p>Juice 的演算法不算複雜：</p>

<ol>
<li><p>先濾掉明顯不會是內文的 HTML tags 。例如： &lt;menu>&lt;/menu>, &lt;div class=&#8221;comment&#8221;>&lt;/div>, &lt;footer>&lt;/footer></p></li>
<li><p>接著選出 html 樹狀圖中內文較多的分支，把其他分支剔除。</p></li>
<li><p>最後，把選到的分支裡的每個 tag 所含的文字比重拿來算分，低於一定比值的就自動刪掉。</p></li>
</ol>


<p>juice 的 API 十分簡單：</p>

<pre><code>juice = Juice.new(url)
juice.extract

puts juice.title
puts juice.content
</code></pre>

<p>不過目前還是有些網頁編碼會出問題 ，但根源是來自於 nokogiri 沒有處理好，讓作者十分苦惱。</p>

<h3>更強的 Juice ？</h3>

<p>作者正打算透過 Machine Learning 讓 Juice可以有更精準更強大的截取演算法，亦即自動從資料庫中選網頁，萃取後和預期結果比對，如果相似度在一定比例內的話就固定目前的參數，差太遠就微調參數重做，直到找到最佳解為止。</p>

<p>每個無法截取理想內容的網站也會建立 profile ，juice 讀取時會透過專門的參數來讀取這些網站。</p>

<p>聽起來就不是一兩天可以做完的事，也許你能幫作者一臂之力？</p>

<h2>Reference</h2>

<ul>
<li><a href="http://tomazkovacic.com/blog/14/extracting-article-text-from-html-documents/">Overview: Extracting article text from HTML documents | My tech blog.</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gems 混搭空想]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/04/09/mix-gem/"/>
    <updated>2012-04-09T08:43:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/04/09/mix-gem</id>
    <content type="html"><![CDATA[<h2>空想所根據的規則</h2>

<p>Ruby 的 Gems 五花八門，其中不乏很多有特色的 Gems 。常常在想是不是有可能利用這些 Gems 搭出有趣但不一定要實用的服務呢？</p>

<p>大致上， Gems 可以分為 Front-end 和 Back-end 以及 Mixed ，我混搭的第一步就是先搜集一些有趣的Gems，然後再隨機的組合。基本上是從 Front-end 和 Back-end 裡面各抽出一個候選人，接著想想搭在一起會變成什麼玩意。當然，搭出來的可能是狗屁不通的結果，但是，一切都以好玩為出發點。</p>

<h2>Front-end gems</h2>

<p>Front-end 比較偏向內容的呈現，可能是輸出圖形，也可能是輸出文字或是兩者。</p>

<ul>
<li><a href="https://github.com/imathis/octopress">octopress</a>：知名的部落格架站系統</li>
<li><a href="https://github.com/schacon/showoff">showoff</a>：web 介面的投影片</li>
</ul>


<h2>Back-end gems</h2>

<p>Back-end 以 processing 為主，比較沒有花俏的輸出。</p>

<ul>
<li><a href="https://github.com/tenderlove/mechanize">mechanize</a>：爬蟲，抓網頁很強大，可以指定 referer 來抓一些可能會被檔的網頁。</li>
<li><a href="https://github.com/tenderlove/nokogiri">nokogiri</a>：html / xml 分析器，能透過 xpath 或 css selector 輕鬆取代修改文件。</li>
<li><a href="https://github.com/cardinalblue/rest-core">rest-core</a>：和社群網站 api 串接的工具。</li>
</ul>


<h2>開始做夢</h2>

<h3>octomachine</h3>

<p>第一組上場的候選人是 octopress / mechanize ，他們的結晶是 octomachine ！女士們，先生們，你可曾偷別人的文章發表過？有了 octomachine 你不需要辛苦的手動盜文了！ 它會自動定時地去您指定的網站檢查是否有更新，再自動偷文轉貼到您的 octopress 部落格上！</p>

<h3>octogiri</h3>

<p>第二組，octopress / nokogiri ，合稱 octogiri 。可以幫助你分析你的部落格文章用了多少字，多少 html 標籤等等。</p>

<h3>octorest</h3>

<p>第三組 octopress / rest-core 的 octorest 則是讓你的部落格文章可以一鍵發送到各個社群媒體（ Facebook, Twitter, plurk … oh, and google+ ）</p>

<h3>showmachine</h3>

<p>第四組由 showoff / mechanize 組成的 showmachine 是一個即時將指定的部落格轉成投影片的工具，讓您可以隨時介紹自己的部落格(？)</p>

<h3>showgirl</h3>

<p>  第五組， showoff / octogiri 帶來了 showgirl (我沒拼錯，比較喜歡這樣叫～) ，網頁分析報表軟體。以投影片的方式報告網頁有哪些壞連結，有哪些不符合規範的標籤。</p>

<h3>show-rest</h3>

<p>  最後一組， showoff / rest-core ， show-rest ！這可厲害了，可以把你所有的社群訊息轉成投影片，你不需要一一瀏覽不同網站，只要連到你的投影片網址，最新的動態就一張一張地呈現給你看！如果你是宅到爆表的魔人，你絕對要試試這個！</p>

<h2>More?</h2>

<p>  Front-end 和 Back-end gems 未必要各取其一，也可以都是 Front-end 或都是 Back-end，甚至更多。偶爾來些 gems 的腦力激盪，也是蠻不錯的遊戲。說不定，你的下一個產品就是從這種激盪中生出來的。</p>
]]></content>
  </entry>
  
</feed>

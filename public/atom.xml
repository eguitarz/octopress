<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Finite Coffee]]></title>
  <link href="http://dale-ma.heroku.com/atom.xml" rel="self"/>
  <link href="http://dale-ma.heroku.com/"/>
  <updated>2013-05-18T19:22:28+08:00</updated>
  <id>http://dale-ma.heroku.com/</id>
  <author>
    <name><![CDATA[Dale Ma]]></name>
    <email><![CDATA[dalema22@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Browser atanomy]]></title>
    <link href="http://dale-ma.heroku.com/blog/2013/05/18/browser-atanomy/"/>
    <updated>2013-05-18T16:48:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2013/05/18/browser-atanomy</id>
    <content type="html"><![CDATA[<p>Recently, I&#8217;m interested in browser behaviors, here&#8217;s the note after I read a nice article <a href="http://taligarsiel.com/Projects/howbrowserswork1.htm">How browser work</a>.</p>

<ul>
<li>Browser components
<img src="images/layers.png" alt="" /></li>
</ul>


<h2>Components - UIs</h2>

<ul>
<li>UI: Elements except main window. (Address bar, bookmark…)</li>
<li>UI Backend: Generic elements in main window. (Checkbox, input…)</li>
</ul>


<h2>Components - engines</h2>

<ul>
<li>Browser engine: Rendering engine interface.</li>
<li>Rendering engine: draw requested content.</li>
<li>JS interpreter: run JS.</li>
</ul>


<h2>Components - backends</h2>

<ul>
<li>Networking: platform independent network interface.</li>
<li>Data Persistence: data storage.</li>
</ul>


<h1>Render engine</h1>

<p>Main flow:
1. Parsing HTML and build dom tree.
2. Render with styling info.
3. Layout and positioning.
4. Painting.
<img src="images/flow.png" alt="" /></p>

<h2>Render engine of Safari &amp; Gecko</h2>

<ul>
<li>Safari parser flow</li>
</ul>


<p><img src="images/webkitflow.png" alt="" /></p>

<ul>
<li>Gecko parser flow</li>
</ul>


<p><img src="images/mozillaflow.jpg" alt="" /></p>

<p>Basically equal, but Gecko has a Content Sink process to making DOM elements.</p>

<h1>What does parser do?</h1>

<p><img src="images/parser.png" alt="" /></p>

<p>It breaks the content into lexers (tokenizers), and constructing the parse tree via Syntax rule, then translates result to machine code.</p>

<h2>HTML parser</h2>

<p>HTML is NOT a context free grammar which means it&#8217;s more difficult to implement.</p>

<p><img src="images/htmlparser.png" alt="" /></p>

<p><img src="images/htmlparserflow.gif" alt="" /></p>

<h2>CSS parser</h2>

<p>CSS is a context free grammar which means it could be build via parser generator by providing token definition and syntax.</p>

<p><img src="images/cssparser.png" alt="" /></p>

<h2>The order of parsers</h2>

<h3>Scripts</h3>

<p>Synchronous, top to bottom, only one script could be parsed/executed at a time, excepts &lt;script defer> or &lt;script async>(HTML5).</p>

<h3>Speculative parsing</h3>

<p>While executing script, another thread will fetch the rest scripts in document, for optimization.</p>

<h3>Style sheets</h3>

<p>Asynchronous. Firefox blocks scripts until all css are parsed. Webkit does only when the scripts access unsafe css.</p>

<h1>It&#8217;s not the end</h1>

<p>Next topic will talk about render tree and Layout.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript bind method]]></title>
    <link href="http://dale-ma.heroku.com/blog/2013/05/11/javascript-bind-method/"/>
    <updated>2013-05-11T17:51:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2013/05/11/javascript-bind-method</id>
    <content type="html"><![CDATA[<p>Recently I was thinking how to make my javascript codes more readable. I tried &#8220;bind&#8221; in Function object and it does help. Function object has a method &#8220;bind&#8221;. It simplify codes and make them more beautiful.</p>

<h2>Syntax</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">fun</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">thisArg</span><span class="p">[,</span> <span class="nx">arg1</span><span class="p">[,</span> <span class="nx">arg2</span><span class="p">[,</span> <span class="err">…</span><span class="p">]]])</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>thisArg</code>: the &#8220;this&#8221; context to be passed into <code>fun</code></li>
<li><code>arg1</code>, <code>arg2</code> …: additional arguments which passes to <code>fun</code>&#8217;s scope</li>
</ul>


<p>The purpose of <code>bind</code> is change current context easier. You don&#8217;t have to create a variable like <code>self</code> to store your context.</p>

<p>All right, how does it help me killing my fat codes? Let&#8217;s look at an example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">camera</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">owner</span><span class="o">:</span> <span class="s1">&#39;Irena&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">shoot</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;shoot by &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">owner</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;ready&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">camera</span><span class="p">.</span><span class="nx">shoot</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>I don&#8217;t want to write function() { … } in document ready event, since i&#8217;m calling <code>camera.shoot</code> function, it should be fed directly to event binding argument. So it becomes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">camera</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">owner</span><span class="o">:</span> <span class="s1">&#39;Irena&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">shoot</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;shoot by &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">owner</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;ready&#39;</span><span class="p">,</span> <span class="nx">camera</span><span class="p">.</span><span class="nx">shoot</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Keep an eye on <code>camera.shoot</code>, there&#8217;s no <code>()</code> after it. But it&#8217;s not right, the result prints <code>shoot by undefined</code>. Since it&#8217;s &#8220;Function Call&#8221; not &#8220;Object Method&#8221;, the context became global variable, here it is <code>document</code>. To make it right, the context should be <code>camera</code> object. To solve this, I use <code>bind</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">camera</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">owner</span><span class="o">:</span> <span class="s1">&#39;Irena&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">shoot</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;shoot by &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">owner</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;ready&#39;</span><span class="p">,</span> <span class="nx">camera</span><span class="p">.</span><span class="nx">shoot</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">camera</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>This style has three benefits:</p>

<ol>
<li>No more ugly curly braces.</li>
<li>Make context of the binding function clearer.</li>
<li>Separate events binding and function definition.</li>
</ol>


<p>For my personal opinion, I don&#8217;t really like the word <code>bind</code>, I would like to see it more common.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">by</span> <span class="o">=</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bind</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">camera</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">owner</span><span class="o">:</span> <span class="s1">&#39;Irena&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">shoot</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;shoot by &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">owner</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;ready&#39;</span><span class="p">,</span> <span class="nx">camera</span><span class="p">.</span><span class="nx">shoot</span><span class="p">.</span><span class="nx">by</span><span class="p">(</span><span class="nx">camera</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>I love it, aren&#8217;t you?</p>

<h1>Reference</h1>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind">MDN - Function.prototype.bind</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mailbox]]></title>
    <link href="http://dale-ma.heroku.com/blog/2013/03/25/mailbox/"/>
    <updated>2013-03-25T21:54:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2013/03/25/mailbox</id>
    <content type="html"><![CDATA[<p>Mailbox，一個 2013 年快速竄紅的手機信箱 App，上架首周即達成 15 萬人註冊下載，並於三個月內由 Dropbox 以傳聞 1 億美金買下。很囂張的軟體，但這不是背後製作團隊的第一個作品。</p>

<p>Mailbox 的前身是 Orchestra，一個手機 to-do list。 to-do list 軟體多到比大學生還多， 以 to-do list 為概念的信箱整理技巧也不是第一天聽聞，為何 Mailbox 能贏得那麼多人的眼球？</p>

<h3>行銷</h3>

<p>Mailbox 極富盛名的預約排隊系統是幕後功臣之一。沒人喜歡排隊，所以儘可能不要讓使用者等待… 錯！端看於你能給使用者什麼樣的等待體驗，如果能讓使用者介於喪失耐心與渴望間取得平衡，等待還是有它存在的價值。</p>

<p>Mailbox 的排隊系統可以顯示你目前排到第幾號，這很平常。但除此之外，也可以顯示有幾個 loser 排在你之後。讓人有種優越感，進而激起期待產品到手的那股衝動。</p>

<p>這種新穎的排隊方式激起了很多話題，也成了一種病毒式行銷手法。很多人根本不知道實際產品長怎樣，只是衝著排隊而來，非、常、誇、張。</p>

<h3>介面</h3>

<p>Mailbox 的設計很簡單樸實，沒有花俏的圖案，沒有誇張的視覺效果，最近受歡迎的 App 幾乎都是走同樣的路。</p>

<p>主要選單的設計和 Facebook 一樣是從左邊滑出，而非彈跳式視窗，避免視覺連貫性中斷。</p>

<p>主要功能列只有 Inbox, Later, Finished, 和 Compose，最常使用的就是在 Inbox 內看信，所以預設的 View 是 Inbox。每個 View 之間切換也採用滑動式處理，完全沒有突兀的彈跳視窗。</p>

<h3>使用者體驗</h3>

<p>透過滑動來處理每條 mail 要進入 Later 或 Finished 資料夾，還貼心的預設稍晚處理、明天處理、下週處理的快捷鍵。整個體驗流程很順暢，就連滑動手勢的長短也有相應的功能。我喜歡這種一指走天下的作風，可以一手插口袋一手處理事情的帥氣軟體(要搭配西裝)。</p>

<h3>-</h3>

<p>還沒申請的話可以透過 App Store 下載 Mailbox 的軟體來排隊等開通，歡迎加入排隊地獄。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[半醉人生]]></title>
    <link href="http://dale-ma.heroku.com/blog/2013/02/23/half-drunk-life/"/>
    <updated>2013-02-23T15:58:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2013/02/23/half-drunk-life</id>
    <content type="html"><![CDATA[<p>追求好頭銜、賺取財富，汲汲營營的拿下人生的“主流”成就，幾年前的我，也是這樣。也不知道什麼時候，開始覺得這種“主流”的價值乏而無味、膚淺至極。憂慮、生氣、悲傷，當我回顧曾經做了些什麼，總是在這些狀態中循環 - 我竟然沒有些像樣經驗和可玩味的創作。</p>

<p>有時候會覺得獨醒於世，孤獨感伴隨而來。不是那種自命清高的獨善其身，而是覺得自己和現實格格不入。於是一切開始隨便了起來，丟掉原定的技術學習計劃，打開電腦上的網路端口接收美劇串流。</p>

<p>隨性是鈍化我的酒精，當高度憂慮感交纏腦中時，隨性而為常常是尋找出路的好方法。我不是好的輸出者，無法把心裡的感受找人傾瀉。所以有時候看看美劇、翻翻雜書、做點菜、跨上單車四處逛。</p>

<p>生命不該這麼沈悶吧？不想只是一個勞力輸出單元亦或腦力輸出單元，每個人的人生都不該只是由簡單的輸出和回饋來約定。一定有路能讓一切變得不一樣的，一定有的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blink 決斷 2 秒間]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/12/23/blink/"/>
    <updated>2012-12-23T12:48:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/12/23/blink</id>
    <content type="html"><![CDATA[<p>有時候你不加思索就從複雜的選項中挑出了正確的答案，有時候不知道為什麼感覺今天會有事發生，下一秒就真的出現了驚喜。這是巧合嗎？Gladwell 認為這是我們精巧的潛意識在背後幫助我們。</p>

<p>潛意識的運作方法依靠於“薄片截取”，當專家鑑賞一件藝術品是否為贋品，只須要一眼，就有種感覺從內心油然而生。潛意識會忽略大部分的資訊，只從中取出它想要的。很神奇，但很管用。</p>

<p>當面臨緊急危機時，潛意識能在很快的速度做出判斷。有經驗的消防隊員衝進火場時，立刻就可以知道這裡的火勢是否已受控制，安不安全。也許這是一種人類從遠古時期演化而來的天賦，面對面目猙獰的猛獸，你可沒時間慢慢思考。</p>

<p>但潛意識很脆弱，極易受到過多的資訊干擾，既有的刻板印象也會影響潛意識的正常運作。白人警察看到黑人留著爆炸頭，通常會立刻認為這傢伙有問題而上前盤查一番。我們面對困難的抉擇瞬間閃過的答案通常比較正確，分析過不同輔助資訊而下的決定反而常常出錯。</p>

<p>我們沒辦法確定潛意識的運作細節，要善用潛意識，應該適時適所，避免預作假設。潛意識不喜歡處理太多資訊，捨棄累贅的資訊，只面對最重要的。</p>

<p>有一個有趣的預設立場實驗。一對父子發生嚴重車禍，父親死亡，兒子送醫急救。急救醫師看見男孩嚇了一跳，說：「這男孩是我兒子！」請問這位醫師是誰？</p>

<h2>參考資料</h2>

<p>思考抄捷徑 - 決斷 2 秒間 by Malcolm Gladwell</p>

<p>P.S. 我們常常預設立場而影響了正常的判斷，如果我們預設所有醫師都是男性，那麼上題的答案，男孩的媽媽，就很難猜出來了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[知識生產術（二）- 辨別資訊洪流中 1% 本質的技術]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/11/20/knowledge-generation-2/"/>
    <updated>2012-11-20T20:31:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/11/20/knowledge-generation-2</id>
    <content type="html"><![CDATA[<p>我們每天可以接觸到大量資訊，其中只有 1% ~ 10% 對我們是真正有用的，勝間和代提出了一些獨特的見解方法來協助辨別這些有用的資訊。</p>

<p>共有 6 個面向，前三個是抽象的觀念，後三個是實務的做法。</p>

<h2>架構力</h2>

<p>透過架構力，把資訊的骨幹抓出來，汰除累贅的部分，可以加深印象。有系統的將資訊分門別類，需要練習，可以先從覺得整理不錯的文章開始學習。</p>

<h2>智慧力</h2>

<p>擁有整理架構的能力，還需要足夠的經驗，從資訊中歸納出結論，甚而激發出新的構想。作者將這稱為智慧力。</p>

<h2>失敗力</h2>

<p>透過失敗得到新的啟發。未必一定是事情搞砸才算失敗，將原本手續繁雜費時的事物處理步驟優化也是一種失敗力。譬如每天減少自己的做同樣工作時間，但卻又能產出一樣甚至更好結果的能力。</p>

<h2>共享最佳實務做法</h2>

<p>又稱標竿學習，在找到某領域上的最佳實務做法前，不妨先參考別人的最佳實務做法。</p>

<h2>捨棄無法發揮自己價值的部分</h2>

<p>別硬是鑽研沒興趣的知識，或是未來使用機率不高的資訊。</p>

<h2>讀書、讀書、讀書</h2>

<p>作者認為書的資訊優良度最高，要比網路上未經處理的雜訊要好。她每月花 15 萬日圓買書，大多的書都與價格呈正比，精裝 > 軟皮 > 隨行本，所以請不要猶豫買貴的書。同時她重視閱讀速度，有了閱讀速度，可以快速的透過目錄架構知道這本書該不該買，也可以快速大量閱讀書籍。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[知識生產術（一） - Google 化]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/11/18/knowledge-generating-method/"/>
    <updated>2012-11-18T22:04:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/11/18/knowledge-generating-method</id>
    <content type="html"><![CDATA[<p>最近把勝間和代的 “新。知識生產術” 拿出來重翻，頗有領悟，決定記錄下自己的體會與想法。</p>

<h2>Google 化</h2>

<p>列出主題，隨時進行不同的關鍵字搜尋，主題應該具體些。此法可以透過不同面向觀察事物，甚而從中發掘新的搜尋目標。</p>

<h2>Give 5 法則</h2>

<p>分享才能讓知識深化，甚而獲得意外回響，可以透過寫部落格、聊天達成。（至於為何叫 Give &amp; Give &amp; Give &amp; Give &amp; Give，可能是作者為了強調施予才能獲得報酬吧）</p>

<h2>雙軌並行法則</h2>

<p>各種資訊一定要有備份，除了確保重要資訊不遺失外，臨時要搜尋也有兩個地方可以找。對於這點我頗有心得，因為有使用 Evernote 的習慣，我會把所有 note mail 一份至 Gmail。 另外有使用本機郵件軟體(Sparrow)， Gmail 的信件會有一份存在本機。pdf 等文件存在 Dropbox 和本機上。</p>

<p>資訊整理的工具很多，應該多多嘗試，留下對自己最有用的部分。將不同的工具組合，可能會產生意想不到的效用。作者認為資訊即金錢，能在有限時間內，將盡可能多的有用資訊內化，是爬向資訊時代金字塔的祕技。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Invisible scrollbar]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/11/06/invisible-scrollbar/"/>
    <updated>2012-11-06T20:00:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/11/06/invisible-scrollbar</id>
    <content type="html"><![CDATA[<p>You want to hide your scroll bar, but you still want to keep the scrolling ability. Then you&#8217;re gonna need an invisible scroll bar, this article might quite fit your needs.</p>

<p>There is no any javascript are required to make this work. The concept is dead simple. You need 2 divs. One is &#8220;wrapper&#8221;, another is &#8220;content&#8221;. You put your context into &#8220;content&#8221;, and there sure do will have a scroll bar there. Set the &#8220;content&#8221; size, and set the &#8220;wrapper&#8221; size, make the &#8220;wrapper&#8220;&#8216;s size a bit smaller than &#8220;content&#8221;. For more accuracy, which is &#8220;wrapper&#8220;&#8216;s width minus &#8220;content&#8221; scroll bar&#8217;s width.</p>

<p>Last step is set &#8220;wrapper&#8220;&#8216;s <code>overflow-x: hidden</code>, and <code>overflow-y: auto</code>. That&#8217;s all. Period.</p>

<p>For the code please refer to
<a href="https://gist.github.com/4024297">https://gist.github.com/4024297</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩網路金流絕不能不知的 PayPal IPN]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/10/29/paypal-ipn/"/>
    <updated>2012-10-29T08:05:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/10/29/paypal-ipn</id>
    <content type="html"><![CDATA[<p>PayPal 是個以安全著稱的金流服務商。 PayPal 的 IPN 也不是隨便就能搞定的通知協定。</p>

<h2>IPN 是什麼？</h2>

<p>當使用者透過你的網站在 PayPal 結帳完成時， PayPal 會 <code>POST</code> 通知回來，這就是 IPN (Instant Payment Notification)。</p>

<h2>實作原則</h2>

<p>IPN 驗證分為這些步驟：</p>

<ol>
<li>API / button 引導使用者在 PayPal 完成結帳。</li>
<li>PayPal <code>POST</code> 一串包含使用者與賣家資訊的訊息。</li>
<li>賣家 server 檢查完這串訊息無誤後，原封不動的 <code>POST</code> 回 PayPal。</li>
<li>PayPal 確認賣家回傳的訊息無誤後，<code>POST</code> 一個 <code>VERIFIED</code> 或 <code>INVALID</code> 的字串。</li>
</ol>


<p>關鍵在於要檢查 <code>2.</code> 裡面的訊息，避免商業詐欺。以下是必須檢查的項目：</p>

<ol>
<li><code>receiver_email</code> = gm_1231902686_biz@paypal.com 確認是賣家自己的 mail。</li>
<li><code>txn_id</code> = 61E67681CH3238416 這代表交易編號，有時候 PayPal會回傳兩個相同的交易編號，這時要避免重覆在賣家的 server 上認證，避免連續賣出兩次商品。</li>
<li><code>payment_status</code> = Completed 代表付款完成，可別讓人沒付完錢就送出產品 / 服務了。</li>
</ol>


<h2>參考資料</h2>

<p><a href="http://bit.ly/TodWRL">PayPal IPN 官方文件</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[松浦彌太郎的輕生活練習]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/10/28/light-life/"/>
    <updated>2012-10-28T10:11:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/10/28/light-life</id>
    <content type="html"><![CDATA[<p>你身上是否背着不必要的行囊？
你可以斷言，自己的生活輕鬆簡單嗎？</p>

<p>這兩句卷頭詞讓我想要一窺松浦彌太郎的著作“<code>放下包袱的輕生活學習</code>”。這本書不是教你如何收納物品把家裡整理的井然有序，這本書著重在心靈的層次衍生至對於人生的省思。</p>

<p>剛開始講珍惜，珍惜每次和人見面的機會，珍惜每次打招呼的片刻，珍惜獨自相處的時機，培養蹦蹦跳跳的工作態度。</p>

<p>順著與人相處的話題，進入到工作上的建議。觀察、推理、溝通，是他認為職場上發光發熱的利器。他也倡導工作與生活融合在一起，大方的將私底下的一面和同事分享。</p>

<p>松浦彌太郎也談到了反思的力量，他過去是個渾渾噩噩過生活的失敗者。他思考着究竟是什麼力量改變了他，讓他現在能夠活的亮眼。</p>

<p>最後，他提出了人生資產，一種無形的資產。每個人都該好好列出自己的“人生資產”，善於溝通、喜歡交朋友、學習力強…等。多花時間投資於自己<code>擅長的</code>，少碰那些就算投資也不會有太大成效的非專精特長。</p>

<p>松浦先生某種層面上和我有些相似，看了他的書後令我心生共鳴。我也希望能和他一樣，趁著年輕到外面看看自己的能耐。他 20 多歲時流浪到美國，過著餐風露宿的生活。初衷是找尋自由，最後也讓他找到了自己對於自由的答案。</p>

<p>現在這個年紀的我，還有太多的疑惑，還有太多的猜想，對於人生充滿了不確定。理出肉眼看不見的輕便行囊，往前走，看來是個必然的下一步了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From the first sun shine to the last moon light]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/10/27/first-sunshine/"/>
    <updated>2012-10-27T10:49:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/10/27/first-sunshine</id>
    <content type="html"><![CDATA[<p>You know you&#8217;re not gonna sit there and wait to die.</p>

<p>You know here is not the last place for you.</p>

<p>You got a big dream to bring up.</p>

<p>You got a strong plan to run up.</p>

<p>All you need is a meditation. A deep, slow talk to yourself.</p>

<p>If the 50% of you agree with yourself, than go for it.</p>

<p>Exhaust all your energy and do it, from the first sun shine to the last moon light.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[模擬城市，模擬創業]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/10/11/simcity/"/>
    <updated>2012-10-11T11:29:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/10/11/simcity</id>
    <content type="html"><![CDATA[<p>最近，突然發現約莫十年前的電腦遊戲模擬城市，與創業的高度關聯。模擬城市是一款從無到有建造城市的遊戲。遊戲的目的就是永續發展一座城市，沒有所謂的勝利條件。你可能會因為缺乏資金或是喪失興趣退出遊戲，遊戲過程中也會出現大大小小的災難考驗你的應變能力。不覺得跟創業頗神似？</p>

<h2>願景規劃</h2>

<p>你可以一開始就把你理想的城市藍圖規劃好，包含每條水管，每塊區域。但就跟創業一樣，環境變化沒有任何理論、任何人可以做出準確預測。你很難拿捏今天規劃好的道路，明天會不會不堪使用。如果一開始就花大錢蓋高速公路，沒人用的話不僅天天賠錢，還要花心思重新規劃。</p>

<p>創業，準確一點來說，精實創業，也根基於小而美的理念。在你發展出 Minimum Viable Product前，一切從簡，砸大錢一次到位，只是讓自己走在搖搖欲墜的鋼索，一旦摔落就永不翻身。</p>

<h2>設計測試實驗</h2>

<p>在模擬城市裡，你想要發展一塊新區域，比較好的做法是先挪出一小塊土地，嘗試一些實驗性質的設計，像是新的地鐵系統等等。萬一失敗了，可以快速地重新再來。成功了，就能依照小規模時的設計，慢慢擴張。</p>

<h2>找資金</h2>

<p>一開始你會有一筆錢，如果你是選擇困難模式，這筆錢會很少。你的任務是找出獲利模式，在那之前，並不會有太大的營收。如果你很早引入資金（蓋賭場、軍事基地），他們可能會慢慢成為你城市的毒瘤，趕跑你的市民。某種程度和唯利是圖的創投有幾分神似。</p>

<p>必須要耕耘一段時間，讓城市發展到一定程度以後，才會有可靠的穩定營收，所以初期的每一個決策都很重要，馬虎不得。</p>

<h2>你不是孤單一人</h2>

<p>遊戲裡有衛星城市的設計，相鄰的城市可以分享資源，譬如賣出電力、水資源。或是提供工作機會。創業你不必單打獨鬥，你可以和別人組成團隊，或和其他公司異業結盟。</p>

<p>在遊戲裡的設計，很難只靠一個城市就發展出高科技、高人口的都會，還是需要聯合大大小小不同特色的城市才辦得到。</p>

<h2>現實中失敗了很難重來，但這裡很容易</h2>

<p>模擬城市可以當做一種創業模擬器，訓練怎樣掌控資源，怎樣面對問題和提出解決方案。遊戲難度不高，建議調整成困難模式。剛開始可能很容易賠錢， Pivot 幾次後，就能慢慢上手了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Put your photos together]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/10/09/posterino/"/>
    <updated>2012-10-09T10:27:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/10/09/posterino</id>
    <content type="html"><![CDATA[<p>I found <a href="http://www.mycookingdiary.com/">My cooking Diary</a> recently. It shows a amazing present of photos, makes me really wondering the software it uses.</p>

<p>It is <a href="http://zykloid.com/posterino">Posterino</a>, which put many photos into one frame. It&#8217;s not the newest thing, but it&#8217;s delicate and useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iwanttowriteasoftware]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/09/10/iwanttowriteasoftware/"/>
    <updated>2012-09-10T13:27:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/09/10/iwanttowriteasoftware</id>
    <content type="html"><![CDATA[<p>標題看來具體，但內容其實是根據 Seth Godin 的 <a href="http://www.ted.com/talks/lang/en/seth_godin_on_sliced_bread.html">How to get your ideas to spread</a> 和 37 Signals 的創業故事有感而發的想法。</p>

<p>寫軟體，桌面軟體、手機軟體、平板軟體、網路軟體，任何種類我都不排斥。我只想寫對我有用，也有人用的軟體。對我有用這件事很容易辦到，從生活中的瑣事歸納出一套固定邏輯，就可以變成一套軟體。但該怎樣確保寫出來的軟體是對別人也有用，他們看了眼睛會為之一亮，會拍案叫絕，會愛不釋手？</p>

<h2>扁平鐘型市場</h2>

<p>我們都知道常態分佈，以 x 軸為會買你東西的人，以 y 軸為人數，畫出來的圖形就像一鼎鐘一樣。鐘的左邊和右邊人數稀少，都是些怪咖，是屬於先知先覺者。鐘型的中間佔了 80% 的面積，絕大多數正常人都落在這塊。</p>

<p>邏輯告訴我們要針對那 80% 的正常人開發產品，他們要甜的就加糖，要鹹的就加鹽，要辣的就加個辣。最後你的產品腫脹不堪，美其名是“一卡在手，萬事無窮”，實質是“不三不四，嗚呼哀哉”。</p>

<p>不，身為一個非正常人(會想自己開發產品的絕對是怪咖)怎會想開發正常的產品？開發的初衷是為了自己，為何要開發出一個每幾小時就會跳出藍畫面的詭異軟體來取悅大眾？</p>

<h2>怪咖的好處</h2>

<p>我們應該針對那 20% 的怪咖開發產品，因為你也是怪咖之一。這麼做的好處在於你可以主導產品的功能，因為它是專為你設計的。另一個最大的好處是，你省了很多資源。你不必為了一個鱉腳功能，多寫 1000 行程式碼，也多出了一周來做更值得的功能。</p>

<p>你不比擔心做出來的東西功能太少沒人要，好的產品只要有一樣功能切中人心，就能受歡迎。還記得鐘型曲線嗎？事實上，鐘型曲線已經默默地往外擴散了。怪咖愈來愈多，傳統的 80 / 20 法則，將漸漸不適用在這上面。怪咖的其他特色是，愛分享。你的產品真的符合他們的需求，自然就有機會促成一波病毒式行銷，你甚至不需出半毛廣告費。</p>

<h2>我想在這樣的環境下寫軟體</h2>

<p>適當的限制有時侯能產出出色的成果。我不需要開發怪物軟體，所以程式碼自然就不多。限制功能數量是不錯的選擇。由於軟體具高度專一性，限制開發人員數量，也可有效避免意見發散。最後，我想限制的是時間，給自己一個死期，時間到了除非有嚴重的問題，否則一率把產品送出去。</p>

<p>限制重重是種自我要求（或者你也可以解讀為自虐），但你看過微軟做出什麼令人愛不釋手的產品了嗎？（這問題或許因人而異，我承認）不然你以為梵谷為何沒事要自割耳朵？！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use pdf.js to make a PDF thumbnail]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/09/02/use-pdf-dot-js-to-make-a-pdf-thumbnail/"/>
    <updated>2012-09-02T08:52:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/09/02/use-pdf-dot-js-to-make-a-pdf-thumbnail</id>
    <content type="html"><![CDATA[<p>If you want to make a PDF cover image, what will you do? Grab a monster library just only for making thumbnail? No, you don&#8217;t. It&#8217;s dead easy to go with <a href="https://github.com/mozilla/pdf.js">pdf.js</a>.</p>

<p>cavas.html.haml</p>

<pre><code>!!!
%html
  %head
    %script{:src =&gt; "javascripts/pdf.js", :type =&gt; "text/javascript"}
  %body
    :javascript
      'use strict';

      PDFJS.workerSrc = "javascripts/pdf.js";
      $(document).ready(function() {
        PDFJS.getDocument('iperl.pdf').then(function(pdf){

          pdf.getPage(1).then(function(page) {
            var viewport = page.getViewport(0.5);
            var canvas = document.getElementById('box');
            var ctx = canvas.getContext('2d');
            canvas.height = viewport.height;
            canvas.width = viewport.width;

            var renderContext = {
              canvasContext: ctx,
              viewport: viewport
            };

            page.render(renderContext).then(function(){
              //set to draw behind current content
              ctx.globalCompositeOperation = "destination-over";

              //set background color
              ctx.fillStyle = "#ffffff";

              //draw background / rect on entire canvas
              ctx.fillRect(0,0,canvas.width,canvas.height);
              var img = canvas.toDataURL();
              $("#thumbnail").html('&lt;img src="'+img+'"/&gt;');
            });

          });
        });

      })
  #thumbnail
  %canvas#box{:style =&gt; "border:1px solid black;background-color: white;"}/
</code></pre>

<p>The result contains an image and a canvas, quite simple, isn&#8217;t it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How do I train my rails skill?]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/08/26/how-do-i-train-my-rails-skill/"/>
    <updated>2012-08-26T07:11:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/08/26/how-do-i-train-my-rails-skill</id>
    <content type="html"><![CDATA[<p>To master a skill, you have to pay 10000 hours in, then you will be the guru in that field.</p>

<p>I believe repeating is the best way to master something well. I practice CRUD almost everyday. How? by building a todo list web site.</p>

<p>It sucks so much time at beginning, but once you are really familiar with Rails, you can create one less than 10 minutes. Such as <a href="http://www.youtube.com/watch?v=5aaHm9VImVE&amp;t=4m0s">this guy</a>, his name is Jserv, he can write an OS prototype in 15 minutes!</p>

<p>In addition to repeating, another thing is tool. You should prepare some tools to increase your speed on developing. Here are some tools worth to try:</p>

<ul>
<li><a href="http://www.sublimetext.com/2">Sublime 2</a> or <a href="http://www.vim.org/">VIM</a></li>
<li><a href="http://livereload.com/">Livereload</a>, auto refreshes your browser, it helps you to focus on your code.</li>
<li><a href="http://inductionapp.com/">Induction</a>, a polyglot database client.</li>
</ul>


<p>Welcome to tell me if you know any goodies to share ~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy static site on heroku]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/08/06/deploy-static-site-on-heroku/"/>
    <updated>2012-08-06T15:57:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/08/06/deploy-static-site-on-heroku</id>
    <content type="html"><![CDATA[<h2>When you just want simple… on heroku</h2>

<p>Sometimes you just want to deploy a simple web which contains one or two static pages, how would you do? You don&#8217;t want to build a rails project merely to serve a couple of static pages. Here&#8217;s a quick guide for you~!</p>

<h2>Environment</h2>

<p>You should not use cedar stack, that&#8217;s not friendly for static sites. (You need to install some gems by yourself, and do some hacks…) bamboo is a good start point.</p>

<pre><code>heroku create --stack bamboo-ree-1.8.7
</code></pre>

<h2>File structure</h2>

<p>You should create a public folder at root. Put your index.html and stylesheet / js / img folder into &#8220;public&#8221; folder.</p>

<h2>Config</h2>

<p>Last, create a simple config to tell rack middleware how to render the static files…</p>

<pre><code>use Rack::Static, 
:urls =&gt; ["/stylesheet", "/img", "/js"],
:root =&gt; "public"

run lambda { |env|
[
    200, 
{
  'Content-Type'  =&gt; 'text/html', 
  'Cache-Control' =&gt; 'public, max-age=86400' 
}, File.open('public/index.html', File::RDONLY)
] 
</code></pre>

<p>Then you can commit and push the site to heroku. Here are the official guides if you still do not understand…</p>

<ul>
<li><p><a href="https://devcenter.heroku.com/articles/static-sites-on-heroku">Static Sites with Ruby on Heroku/Bamboo</a></p></li>
<li><p><a href="https://devcenter.heroku.com/articles/bamboo">The Badious Bamboo Stack</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember.js practice: Github tool]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/08/02/emberjs/"/>
    <updated>2012-08-02T15:24:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/08/02/emberjs</id>
    <content type="html"><![CDATA[<h1>Why would I build this tool?</h1>

<p>Simply speaking, I want to practice Ember.js. Many guys practicing their first app by doing th Todo list. But I wanna try something different. So I picked Github as my target.</p>

<h1>Ember.js, what?</h1>

<p>Ember.js is a javascript web framework comes from the open source project <a href="http://sproutcore.com/">SproutCore</a>, which Apple was contributed greatly in.</p>

<p>Ember.js structured in MVC pattern, with a built-in template engine. Comparing to Backbone.js (Another javascript framework), it&#8217;s simpler to developers. Backbone.js provides flexibility but you need to write codes by yourself in most cases. Ember.js, on the opposite, might not as flex as Backbone.js is, but it contains already-built structures.</p>

<h1>Functions</h1>

<p>The interface will be pretty simple, a search input field, a recent search results, and the repositories of the searched user. You type the user name in the search box and send the request, I return the repositories of the user.</p>

<h1>First things first</h1>

<p>I have to say I did not start it all by myself. First I browse Andy Matthews&#8217; <a href="http://www.adobe.com/devnet/html5/articles/flame-on-a-beginners-guide-to-emberjs.html">Flame on! A beginner&#8217;s guide to Ember.js</a>. It&#8217;s a simple twitter app built on ember.js. I &#8220;borrowed&#8221; his code and made some modifications. If you need to learn everything from scraps, his guide is quite a good start point. I will not cover too many basic stuffs here.</p>

<h1>On the way!</h1>

<p>It&#8217;s easy to create Ember app, only one line to type:</p>

<pre><code>App = Em.Application.create();
</code></pre>

<h1>Model</h1>

<p>I created a User object to store searched user</p>

<pre><code>App.User = Em.Object.extend({
    name: null,
    avatar: null
});
</code></pre>

<p>And a Repository object to store the Github repository</p>

<pre><code>App.Repository = Em.Object.extend({
    language: null,
    name: null,
    updated_at: null,
    description: null
});
</code></pre>

<p>Here, I store two classes in App (App.User and App.Repository). Upper case of first letter implies it&#8217;s a class.</p>

<h1>View</h1>

<p>Ember provides some views, we can just extend it for our use.</p>

<pre><code>App.SearchTextField = Em.TextField.extend({
    insertNewline: function(){
        App.repositoriesController.loadRepositories();
    }
});
</code></pre>

<p>insertNewline is a pre-defined method, every time users push enter in the search field triggers it.</p>

<p>The TextField extended from TextSupport, for more pre-defined TextSupport methods, you can check <a href="http://docs.emberjs.com/#doc=packages_ember-handlebars_lib_controls_text_support.js&amp;src=true">Ember&#8217;s API for TextField</a>.</p>

<h1>Controllers</h1>

<p>Controller plays an important role, they control which view to show, and which model to access.</p>

<h2>repositoryController</h2>

<p>&#8220;username&#8221; property binds to the search TextField. To bind a property from handlebars, use &#8220;valueBinding&#8221;. For example:</p>

<p>placeholder is html5 feature, which use to show default value of the input. While binding the property, every changes in the front will updates the property in the background.</p>

<p><code>loadRepositories()</code> search the user&#8217;s repositories from Github API, then push into its own array (namely, &#8220;content&#8221; property).</p>

<h2>recentUsersController</h2>

<p>Hence it extend from <code>ArrayController</code>, you cans use <code>this.pushObject()</code> and <code>this.removeObject()</code> to manipulate the users array.</p>

<p>Another point to notice is &#8220;view.context&#8221;. Let&#8217;s look at <code>removeUser()</code> method. In the front end, a hyper link will sends a view to the back end.</p>

<pre><code>&lt;a href="#" title="remove" \{\{action "removeUser" target="App.recentUsersController"\}\}&gt;X&lt;/a&gt;
</code></pre>

<p>This line is wrapped by <code>and</code>, the return value will be the iterated view of recentUsersController, which is, A view object which wraps a User model. To obtain the User object, you use view.context to achieve it.</p>

<h1>Run it up</h1>

<p>It&#8217;s dead easy to run this tool, you have to put it under a http server. Why? some browsers such as Chrome cannot access https protocol via local files.</p>

<p>Once you&#8217;re ready, just open the index.html and try. For the complete codes you can <a href="https://github.com/eguitarz/ember-github-example/zipball/master">down load it from Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[放空後其實更清醒]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/07/04/newlife/"/>
    <updated>2012-07-04T09:09:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/07/04/newlife</id>
    <content type="html"><![CDATA[<p>剛剛結束了半個月的旅行，途中對於未來的路有了更深層的思考。旅行途中我看了 jayonsoftware 的部落格，他每天 4 點半起床，一天只花四小時在寫程式上，同時他還冥想，讓自己的思緒更清楚，<a href="http://www.jayonsoftware.com/home/2012/1/9/daily-routine-of-a-4-hour-programmer.html">整篇文章</a> 給了我很大的啓發，讓我決定也要找找適合自己的生活規律。</p>

<p>首先，我決定學習冥想，初步的 google 結果，發現沒想象中那麼難。冥想能讓腦袋放空，產生適合學習的 Alpha 波。先以最舒服的姿勢坐著，眼睛不一定要閉上，然後慢慢深呼吸，腦袋不要想任何事情。一段時間後（約莫15分鐘）會發現你的心沒有那麼煩躁，大腦也更清醒了。每天起床做一次冥想，幾個月後對心靈會有很大的助益，遇到重大的事情也能泰然的處理。</p>

<p>除了冥想，我也決定增加閱讀的時間，週一到週五閱讀大量的技術書籍，周六日則以非技術書籍為主。同時每年要多學習一種程式語言和人類語言。</p>

<p>平常生活規劃改成 5 ~ 6 點起床、冥想、早餐、接收資訊、寫作。到公司後開始寫程式、學習技術。晚上則盡量11點前上床，將隔天要做的事記下。</p>

<p>如果你也正往高效率的生活邁進，歡迎和我分享。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[邊旅行邊 hacking]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/06/22/travelhacking/"/>
    <updated>2012-06-22T21:38:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/06/22/travelhacking</id>
    <content type="html"><![CDATA[<p>這篇文章是在等待轉機時打的，在這之前我從台北飛到上海住了一夜，又從上海飛到溫哥華，現在只剩意志力能讓雙手在鍵盤上敲打，如果把手停下一分鐘大概就會就此昏睡過去。</p>

<p>不論是工作還是自我學習，我不喜歡在資源太充足的情況下做事。如果有某種程度上的限制，我認為能讓自己更珍惜眼前的資源，進而好好善用他們。聽起來有點自虐，但這是 hacking 的精髓所在，如果你的辦公桌可以擺下三台桌機加一台筆電，如果你的時間無窮無盡，就像拿了遙控器對現實按了暫停一樣，把你想做完的事都做完以後再解除暫停，難道這樣效率就會比較高？不，你會因為過度安逸，而疏於你本來想做的事。（想想你六日碰的程式碼比較多還是平日上班時？）</p>

<p>趁我有15天內飛半個地球的行程，打算在15天內利用空閑時間學習和 coding 。當然，會有大部分時間都在交通工具上渡過，同時網路功能將會受到限制。聽起來很糟，但我發現這段時間我效率超好。</p>

<p>我在上飛機前會先把一些網頁資料開在瀏覽器裡，上飛機的時候有空就會拿出來看。等着過海關的時候，我會盤算我的程式流程要怎麼走，資料庫裡要放些什麼表格。飛機上遇到氣流不穩，我仍然拿著筆電寫著程式，反正我哪也不能去（我的筆電有換上SSD，所以不擔心被機身震動影響）。</p>

<p>目前為止，我蠻滿意這段旅程的工作產出和學習成效。接下來要飛到歐洲搭遊輪，我不打算在遊輪上買貴死人的網路，所以接下來會準備個 7 天份的閱讀資料，上去找時間研讀。在閱讀的你，如果這假日有空，不妨去個沒有網路的咖啡廳，來場“資源受限”的 coding 下午茶試試。</p>
]]></content>
  </entry>
  
</feed>

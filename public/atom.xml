<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dale Ma]]></title>
  <link href="http://dale-ma.heroku.com/atom.xml" rel="self"/>
  <link href="http://dale-ma.heroku.com/"/>
  <updated>2012-04-29T17:22:00+08:00</updated>
  <id>http://dale-ma.heroku.com/</id>
  <author>
    <name><![CDATA[Dale Ma]]></name>
    <email><![CDATA[dalema22@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Image injection 輕鬆檢查身份認證]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/04/29/image-injection/"/>
    <updated>2012-04-29T17:18:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/04/29/image-injection</id>
    <content type="html"><![CDATA[<h2>難道想吃飯一定要學會種稻？</h2>

<p>最近在做網站外認證的事情，也就是在別人的網頁上要認出使用者的身份，除了拿刀子要別人把原始碼拿來讓我加認證程式碼外，還有更好的選擇。無論如何勢必要連回自己的網站做認證，你可以洋洋灑灑的寫個 Ajax 認證機制，甚至還實作了 OAuth 2.0 。喔，不，我是懶惰工程師，費工的事我可不愛幹。</p>

<p>我的目標只是要在別人的網站背後開一個通道，這個通道可以讓我知道使用者是否已經登入我的網站，並且使用者可以利用這個通道向我發送指令。</p>

<p>有個妙招可以做到上述這件事，透過使用者點擊 bookmark 注入 javascript 和圖片到他正在瀏覽的網頁即可。</p>

<h2>圖片，你傳遞資訊的好朋友</h2>

<p>瀏覽器對圖片的限制很寬鬆，當讀取網頁時，也同時在做非同步的圖片讀取。這些圖片可以來自其它網站，而其它網站接到請求時可以根據使用者是否擁有 session 決定要回傳什麼圖片。（這不就很巧妙的做到 ajax 認證會做的事了？）</p>

<p>當目標網頁接收到圖片時，我們可以注入 javascript 讀取圖片的類型而知道使用者是否已經擁有自身網站的 session。</p>

<p>整個過程圖片是就像來源網站的代理人，使用者向來源網站請求圖片，來源網站將資訊透過圖片表達。最簡單的方式可以依據使用者是否登入，回傳寬度為 1 或 2 的空白圖片。</p>

<h2>怎麼做？</h2>

<h3>製作一個可以注入 javascript 的書籤。</h3>

<pre><code>javascript:(function(){MY_SCRIPT=document.createElement('SCRIPT');MY_SCRIPT.type='text/javascript';MY_SCRIPT.src='http://127.0.0.1:3000/test.js';document.body.appendChild(MY_SCRIPT)})();

`my_script.js`是用來 inject 圖片和讀取圖片寬度的 javascript 。
</code></pre>

<h3>製作 my_script.js</h3>

<pre><code>document.body.innerHTML += '\&lt;innerHTMLmg id="MY_IMG" src="path/to/my/image" style="display:none;"&gt;';

現在當使用者瀏覽網站時，點了我們的 bookmark 就會自動注入圖片到當下的網站，由於圖片是隱藏的，使用者並不會發現。
</code></pre>

<h3>加入圖片讀取機制</h3>

<pre><code>在 my_script.js 加上

read_img = function() {
  while (!document.getElementById("MY_IMG")) {}
          var w = document.getElementById("MY_IMG").width;

          if (w &gt; 0) {
            if          (w == 1) {
              alert("User has logged in. width = " + w );
            } else {
                            alert("Please login, width = " + w);
            }
          }
}
read_img();
</code></pre>

<p>將圖片的路徑設定好後，可以在任意的網頁點選書籤，會有一個對話框檢查注入的圖片寬度，程式碼裡 width = 1 代表已經登入，其他則尚未登入。</p>

<p>至於動態產生圖片的部分，可以參考 <a href="http://www.google.com.tw/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0CC4QFjAA&amp;url=http%3A%2F%2Fwww.w3.org%2FGraphics%2FGIF%2Fspec-gif89a.txt&amp;ei=XgadT_S6CqXnmAWPm5TODg&amp;usg=AFQjCNGkPzr6fu-V-T05Uzu6aCxGaZ_iRA&amp;sig2=BNcPCLS_4sFTBpJiAQ8eIg">GIF spec</a> 自己生一個假的 gif 圖片。</p>

<p>要傳送指令的話，也只需在請求圖片時加上 get 參數即可。（例如： &lt;img src=&#8221;MY_IMG&#8221; src=&#8221;path/to/my/image/image.gif?cmd=123&#8221;）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[文字萃取機]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/04/18/text-extract/"/>
    <updated>2012-04-18T22:01:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/04/18/text-extract</id>
    <content type="html"><![CDATA[<h2>什麼是文字萃取？</h2>

<p>我們每天都要瀏覽很多網頁，每張網頁所含的內容其實有2成以上不是我們在乎的。所以開始有人想把重要的內容從網頁中萃取出來，也就是所謂的 text extracting 。文字萃取有很多方法，其中我比較感興趣的只有兩種，阿基米德法和模擬城市法。（對，名字是我亂取的。）</p>

<h2>阿基米德法</h2>

<p>html 是以 tag 所組成的，將每行 html 所含的文字除上 tag 數，每行可以得到一個比值，再把比值較輕的tag移除（文字含量較少）。跟阿基米德以比重來測量皇冠的真假原理一樣。</p>

<p><img src="http://tomazkovacic.com/blog/wp-content/uploads/2011/03/random17-300x166.png" alt="" /></p>

<p>這是以行數為 x 軸，以比重為 y 軸所得到的對應圖。至於怎樣的數值才算最好，那就真的是一門學問了，每張網頁內容都不盡相同，一不小心就會刪掉太多或是保留太多。</p>

<h2>模擬城市法</h2>

<p>這是將所有 tags 的實際位置算出來，擷取位在中間的區塊。這方法實作上稍難，遇上複雜的網頁結構也會不容易判斷。</p>

<p><img src="http://tomazkovacic.com/blog/wp-content/uploads/2011/03/VIPS-300x270.jpg" alt="" /></p>

<h2>以 Ruby 開發的文字萃取 gem</h2>

<ul>
<li><a href="https://github.com/iterationlabs/ruby-readability">ruby-readability</a></li>
<li><a href="https://github.com/eguitarz/juice">juice</a></li>
</ul>


<p>兩種都是以阿基米德法為基礎所發展，個人偏好 Juice ，因為它可以取出比較完整的內容，據說 juice 的作者是因為不滿意前者的精準度而開發的。（謠言可信度很高，因為我就是作者）</p>

<h2>Juice</h2>

<p>Juice 的演算法不算複雜：</p>

<ol>
<li><p>先濾掉明顯不會是內文的 HTML tags 。例如： &lt;menu>&lt;/menu>, &lt;div class=&#8221;comment&#8221;>&lt;/div>, &lt;footer>&lt;/footer></p></li>
<li><p>接著選出 html 樹狀圖中內文較多的分支，把其他分支剔除。</p></li>
<li><p>最後，把選到的分支裡的每個 tag 所含的文字比重拿來算分，低於一定比值的就自動刪掉。</p></li>
</ol>


<p>juice 的 API 十分簡單：</p>

<pre><code>juice = Juice.new(url)
juice.extract

puts juice.title
puts juice.content
</code></pre>

<p>不過目前還是有些網頁編碼會出問題 ，但根源是來自於 nokogiri 沒有處理好，讓作者十分苦惱。</p>

<h3>更強的 Juice ？</h3>

<p>作者正打算透過 Machine Learning 讓 Juice可以有更精準更強大的截取演算法，亦即自動從資料庫中選網頁，萃取後和預期結果比對，如果相似度在一定比例內的話就固定目前的參數，差太遠就微調參數重做，直到找到最佳解為止。</p>

<p>每個無法截取理想內容的網站也會建立 profile ，juice 讀取時會透過專門的參數來讀取這些網站。</p>

<p>聽起來就不是一兩天可以做完的事，也許你能幫作者一臂之力？</p>

<h2>Reference</h2>

<ul>
<li><a href="http://tomazkovacic.com/blog/14/extracting-article-text-from-html-documents/">Overview: Extracting article text from HTML documents | My tech blog.</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gems 混搭空想]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/04/09/mix-gem/"/>
    <updated>2012-04-09T08:43:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/04/09/mix-gem</id>
    <content type="html"><![CDATA[<h2>空想所根據的規則</h2>

<p>Ruby 的 Gems 五花八門，其中不乏很多有特色的 Gems 。常常在想是不是有可能利用這些 Gems 搭出有趣但不一定要實用的服務呢？</p>

<p>大致上， Gems 可以分為 Front-end 和 Back-end 以及 Mixed ，我混搭的第一步就是先搜集一些有趣的Gems，然後再隨機的組合。基本上是從 Front-end 和 Back-end 裡面各抽出一個候選人，接著想想搭在一起會變成什麼玩意。當然，搭出來的可能是狗屁不通的結果，但是，一切都以好玩為出發點。</p>

<h2>Front-end gems</h2>

<p>Front-end 比較偏向內容的呈現，可能是輸出圖形，也可能是輸出文字或是兩者。</p>

<ul>
<li><a href="https://github.com/imathis/octopress">octopress</a>：知名的部落格架站系統</li>
<li><a href="https://github.com/schacon/showoff">showoff</a>：web 介面的投影片</li>
</ul>


<h2>Back-end gems</h2>

<p>Back-end 以 processing 為主，比較沒有花俏的輸出。</p>

<ul>
<li><a href="https://github.com/tenderlove/mechanize">mechanize</a>：爬蟲，抓網頁很強大，可以指定 referer 來抓一些可能會被檔的網頁。</li>
<li><a href="https://github.com/tenderlove/nokogiri">nokogiri</a>：html / xml 分析器，能透過 xpath 或 css selector 輕鬆取代修改文件。</li>
<li><a href="https://github.com/cardinalblue/rest-core">rest-core</a>：和社群網站 api 串接的工具。</li>
</ul>


<h2>開始做夢</h2>

<h3>octomachine</h3>

<p>第一組上場的候選人是 octopress / mechanize ，他們的結晶是 octomachine ！女士們，先生們，你可曾偷別人的文章發表過？有了 octomachine 你不需要辛苦的手動盜文了！ 它會自動定時地去您指定的網站檢查是否有更新，再自動偷文轉貼到您的 octopress 部落格上！</p>

<h3>octogiri</h3>

<p>第二組，octopress / nokogiri ，合稱 octogiri 。可以幫助你分析你的部落格文章用了多少字，多少 html 標籤等等。</p>

<h3>octorest</h3>

<p>第三組 octopress / rest-core 的 octorest 則是讓你的部落格文章可以一鍵發送到各個社群媒體（ Facebook, Twitter, plurk … oh, and google+ ）</p>

<h3>showmachine</h3>

<p>第四組由 showoff / mechanize 組成的 showmachine 是一個即時將指定的部落格轉成投影片的工具，讓您可以隨時介紹自己的部落格(？)</p>

<h3>showgirl</h3>

<p>  第五組， showoff / octogiri 帶來了 showgirl (我沒拼錯，比較喜歡這樣叫～) ，網頁分析報表軟體。以投影片的方式報告網頁有哪些壞連結，有哪些不符合規範的標籤。</p>

<h3>show-rest</h3>

<p>  最後一組， showoff / rest-core ， show-rest ！這可厲害了，可以把你所有的社群訊息轉成投影片，你不需要一一瀏覽不同網站，只要連到你的投影片網址，最新的動態就一張一張地呈現給你看！如果你是宅到爆表的魔人，你絕對要試試這個！</p>

<h2>More?</h2>

<p>  Front-end 和 Back-end gems 未必要各取其一，也可以都是 Front-end 或都是 Back-end，甚至更多。偶爾來些 gems 的腦力激盪，也是蠻不錯的遊戲。說不定，你的下一個產品就是從這種激盪中生出來的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heartbeat Install Guide]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/04/04/heartbeat/"/>
    <updated>2012-04-04T00:25:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/04/04/heartbeat</id>
    <content type="html"><![CDATA[<h2>What - The use of Heartbeat</h2>

<p>Heartbeat is a High-Availability ( HA ) system which keep service alive. For example, Server_1 has a httpd service, and once if it had been shutdown accidently, then the service will stop. There&#8217;s a workaround for this situation, prepare Server_2 and duplicate the service settings on it. Install Heartbeat on both of them. When Heartbeat starts working on both servers, it provides a virtual ip. If any one of servers stop working, the other one will takeover the job.</p>

<p>The clients are linking to the virtual ip, they don&#8217;t know the server has been shutdown. Heartbeat guarantees the service will keep serving clients when any one of its server is alive.</p>

<h2>How - Install Heartbeat</h2>

<h3>Environment</h3>

<p>Server_1</p>

<ul>
<li>CentOS 5.6</li>
<li>ip: 192.168.0.1</li>
</ul>


<p>Server_2</p>

<ul>
<li>CentOS 5.6</li>
<li>ip: 192.168.0.2</li>
</ul>


<p>Virtual ip: 192.168.0.200</p>

<h3>Step 1</h3>

<p>It&#8217;s really easy to install heartbeat on RHEL5 / CentOS.</p>

<pre><code>wget -O /etc/yum.repos.d/clusterlabs.repo http://clusterlabs.org/rpm/epel-5/clusterlabs.repo
yum install -y heartbeat
</code></pre>

<p>We&#8217;re going to use httpd for testing, if you don&#8217;t have this…</p>

<pre><code>yum install -y httpd
</code></pre>

<p>NOTICE: Both serevers require heartbeat and httpd be installed.</p>

<h3>Step 2</h3>

<p>Next, copy configurations. NOTICE: Your heartbeat version might be different.</p>

<pre><code>cp /usr/share/doc/heartbeat-3.0.3/authkeys /etc/ha.d/
cp /usr/share/doc/heartbeat-3.0.3/ha.cf /etc/ha.d/
cp /usr/share/doc/heartbeat-3.0.3/haresources /etc/ha.d/
</code></pre>

<h3>Step 3</h3>

<p>Setting up the authkeys</p>

<pre><code>vim /etc/ha.d/authkeys
</code></pre>

<p>Type</p>

<pre><code>auth 1 # auth num
1 md5 dalema # auth num, auth method, auth secret
</code></pre>

<p>Change privilege</p>

<pre><code>chmod 600 /etc/ha.d/authkeys
</code></pre>

<h3>Step 4</h3>

<p>Setting up ha.cf</p>

<p>Append the settings on the tail of ha.cf</p>

<pre><code>logfile /var/log/ha.log
keepalive 2
deadtime 30
initdead 120
bcast eth0
auto_failback on
node Server_1 # Server 1's hostname
node Server_2 # Srever 2's hostname
ping 192.168.0.25 # it's your gateway ip
respawn hacluster /usr/lib64/heartbeat/ipfail
apiauth ipfail gid=haclient uid=hacluster
</code></pre>

<h3>Step 5</h3>

<p>Setting up the haresources.</p>

<p>Append</p>

<pre><code># point current server's httpd service to the virtual ip
Server_1 192.168.0.200
</code></pre>

<h3>Step 6</h3>

<p>Copy settings to Server_2</p>

<pre><code>scp -r /etc/ha.d/ root@192.168.0.2:/etc/
</code></pre>

<h3>Step 7</h3>

<p>Write some html for testing.</p>

<p>On Server_1</p>

<pre><code>echo "It's Server_1, my heart is beating." &gt; /var/www/html/index.html
</code></pre>

<p>On Server_2</p>

<pre><code>echo "It's Server_1, my heart is beating." &gt; /var/www/html/index.html
</code></pre>

<h3>Step 8</h3>

<p>Test heartbeat is working or not.</p>

<p>Start the service on both serevers ( It takes 2 mins )</p>

<pre><code>service heartbeat restart
</code></pre>

<p>or</p>

<pre><code>/etc/init.d/heartbeat start
</code></pre>

<p>Use browser to connect http://192.168.0.1 and http://192.168.0.200,
Both should work well. And http://192.168.0.2 should be no response.</p>

<p>Then shutdown Server_1&#8217;s heartbeat</p>

<pre><code>service heartbeat stop
</code></pre>

<p>Now, http://192.168.0.2 and http://192.168.0.200 should be workable, and http://192.168.0.1 should be no response.</p>

<p>If you restart the heartbeat on Server_1, the Server_2&#8217;s job will be taken over by Server_1.</p>

<pre><code>service heartbeat start
</code></pre>

<p>Heartbeat will automatically handle your httpd, you don&#8217;t have to worry about that. For the clients outside the cluster, they should connect to the virtual ip.</p>

<h2>Troubleshoot</h2>

<p>The udpport default is 694, make sure you did not block it in your firewall.</p>

<p>And make sure your library in ha.cf has right version, 64-bit is /usr/lib64/&#8230;, 32-bit is /usr/lib/&#8230;</p>

<h2>Resources</h2>

<p>Heartbeat could use with Pacemaker, or use corosync instead of Heartbeat. For more detail, visit</p>

<p><a href="http://www.linux-ha.org/doc/users-guide/users-guide.html">Official Guide</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[那些 iPad 幫上忙的事]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/04/01/the-new-ipad/"/>
    <updated>2012-04-01T23:20:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/04/01/the-new-ipad</id>
    <content type="html"><![CDATA[<p>開心，新 iPad 意外的入手了，輾轉從朋友的朋友的朋友，流浪過美國、中國、香港，終於在這塵埃落定。把 iPad1 賣掉後，只貼了一萬買了這台，雖然沒有初次接觸平板的興奮，但也著實讓我驚艷了一下。庫克先生看來還是有那麼兩把刷子。</p>

<h2>iPad 對我來說，算是生活上很重要的秘書，我用來：</h2>

<h3>晨間推特</h3>

<p>早上醒來，除了抱怨還沒放假外，我會看 Twitter ，把昨晚的推快速掃過，有感覺的文章就先加最愛，等有較長時間再看。</p>

<h3>文章編輯器</h3>

<p>當腦中有想法，又不方便開電腦時，我會用 Nocs 記下來，這款軟體的好處是支援 Markdown 和 Dropbox ,可以邊通勤邊寫部落格,也能寫 idea 的說明文件。</p>

<h3>塗鴉</h3>

<p>如果點子不好用文字描述，我會用 Paper 畫到筆記本裡。它提供了多種風格的記事本，搞設計的絕不能錯過！（好吧，我雖然是搞程式的，但偶爾也會手癢想畫畫嘛）</p>

<h3>閱讀</h3>

<p>一日不讀 iPad ,面目可憎。我幾乎天天都會拿 iPad 翻翻裡面的電子書。 平日看網站發現重要資料會用 Read it later 記下，之後再用 iPad 下載後離線閱讀。</p>

<h3>程式輔助</h3>

<p>iPad 可以拿來當 API 查詢工具，如果你開發 Ruby on Rails ,可以試試 Ruby doc 和 Rails doc。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub - Network圖表學]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/03/30/github-network/"/>
    <updated>2012-03-30T10:34:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/03/30/github-network</id>
    <content type="html"><![CDATA[<p><img src="http://dale-ma.heroku.com/images/network.png"></p>

<h3>歡迎蒞臨 GitHub 星球，這裡是由 Geeks 統治的世界&#8230;</h3>

<p><img src="http://dale-ma.heroku.com/images/menu_network.png"></p>

<p>要研究GitHub Network ，可以選一個有多個人參與的專案來研究一下分支這件事。點選專案，上方的選單會有個 Network 字樣，是讓別人看看這個專案有多少 forks 和 branches 在進行。</p>

<h3>在 GitHub 的世界裡，細胞分裂是一件快速簡單的事</h3>

<p>同一個專案一個使用者只能有一個 fork ，但一個 fork 裡可以有無限多個 branches 。 Fork 最少最少會有一個 master branch (對 git 而言任何開發線都叫 branch )。</p>

<p>舉例來說， Steve 有一個專案叫 Macintosh 。那麼在 GitHub 裡， Steve 會有個 Fork 叫 Setve/Macintosh 。 Bill 某天看到 Macintosh ，也想好好貢獻一己之力，於是他 Fork 了 Steve 的 Macintosh ，叫做 Bill/Macintosh 。 Steve 和 Bill 在自己的 Fork 裡可以有任意數量的 Branches ，例如開發專用的 dev branch ，美術調整專用的 style branch ，撰寫說明文件專用的 doc branch 等。</p>

<h3>除了分裂也融合</h3>

<p>GitHub 的 Network 圖表讓整個專案的進行狀況更清楚，每列代表不同開發者的 Fork ( Repository )，每列裡面會包含1條以上的 branch 。圖表設計是基於 fork 擁有者接下來要做的事情，並不是所有的 fork 都會畫出來。</p>

<p>如果 Steve <code>merge</code>了 Bill 的 code 回自己的 branch ，那麼 Steve 的圖表就不會再顯示出 Bill 。對 Steve 而言，他已經有了最新的 code 。除非 Bill 繼續<code>commit</code>，才會重新回到 Steve 的圖表上。</p>

<p>Network 圖表設計的宗旨在於，讓每個開發者從 code 的角度看整個網路，就像是圖形化的 to-do 清單。如果別人的 code 合併回自己的開發線，那它就沒必要出現在圖表上讓你分神。</p>

<h3>竟然還有圖表熱鍵！</h3>

<p>Network 圖表有些方便的熱鍵，可以用<code>h</code> <code>j</code> <code>k</code> <code>l</code>來上下左右移動( vim  玩家高興嗎？)，<code>shift + h</code> or <code>shift + j</code> or <code>shitf + k</code> or <code>shift + l</code>跳到上下左右的邊界，<code>t</code>來顯示或關閉 branch 名稱。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - 6 篇文上軌道]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/03/28/articles-to-rails/"/>
    <updated>2012-03-28T08:55:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/03/28/articles-to-rails</id>
    <content type="html"><![CDATA[<p>你覺得假日生活無聊，想找點新樂子，但聰明如你不想和凡夫俗子一樣在夜店泡上一整晚，也許可以開始Ruby on Railse的學習之路。如果你有網站程式的背景，那底下這幾篇文章大概4小時內就可以消化完畢‧可以學到</p>

<ul>
<li><p>安裝Ruby on Rails的最佳做法</p></li>
<li><p>Ruby的語法</p></li>
<li><p>用Rails框架實做含資料庫的網站</p></li>
<li><p>Rails開發者常用的套件(gems)</p></li>
</ul>


<h3><a href="http://blog.eddie.com.tw/2011/04/08/rvm-and-gemsets/">RVM and Gemsets</a></h3>

<p>RVM是Ruby developer必備的實驗室，可以準備很多不同版本的Ruby來跑Project。每個Project的環境需求都不盡相同，有了RVM就不必煩惱在不同環境間切換的困擾。這篇教你如何安裝RVM。</p>

<h3><a href="http://ihower.tw/rails3/installation.html">安裝Rails開發環境</a></h3>

<p>安裝Rails、資料庫，介紹開發環境和Gems。</p>

<h3><a href="http://www.ruby-lang.org/zh_TW/documentation/quickstart/">二十分鐘 Ruby 體驗</a></h3>

<p>非常精美的Ruby教學文件，讓你知道Ruby可不是珠寶店裡的紅寶石&#8230;</p>

<h3><a href="http://ihower.tw/rails3/basic.html">打造 CRUD 應用程式</a></h3>

<p>和下面一篇是連貫的，先實作完這篇的程式，再看下篇。這篇是Rails新手的重點文章。</p>

<h3><a href="http://ihower.tw/rails3/restful.html">RESTful 應用程式</a></h3>

<p>主要是講RESTful在rails下怎麼達成。看完後你已經可以100%唬住Rails門外漢了！</p>

<h3><a href="http://blog.xdite.net/posts/2011/10/09/10-ruby-developer-must-have-tools/">十個 Ruby Web Developer 應該熟悉的工具</a></h3>

<p>我認為Git是裡面最需要也最花時間來熟悉的，git init, git add, git commit, git branch, git checkout等是git很常用到的指令。從svn轉戰git會發現有很多觀念不同，不小心就會誤用。</p>

<h3>More gems…</h3>

<p>Rails有很多前人寫好的套件，花在了解套件的時間上甚至會比寫自己的code還多。</p>

<ul>
<li><a href="https://github.com/chriseppstein/compass">compass</a> (SCSS強化版，簡單想就是用變數和類物件導向的CSS)</li>
<li><a href="https://github.com/plataformatec/devise">devise</a> (認證工具，代表不用刻登入、登出的UI和邏輯，YAY!!)</li>
<li><a href="https://github.com/plataformatec/simple_form">simple_form</a> (堪稱比Rails內建form_for更好用)</li>
<li><a href="https://github.com/amatsuda/kaminari">kaminari</a> (分頁工具，資料多的時候不需要自己寫分頁邏輯)</li>
<li><a href="https://github.com/dchelimsky/rspec">rspec</a> (比unit test更厲害的Behavioral Driven Development測試工具)</li>
<li><a href="https://github.com/cucumber/cucumber">cucumber</a> (Behavioral Driven Development的工具，先讓你寫說明文件再開發，說明文件是程式化的語法，跟rspec是好夥伴)</li>
</ul>


<h3>Fun projects…</h3>

<p><a href="https://github.com/imathis/octopress">octopress</a>
有趣的部落格軟體，不需要用資料庫，而是用git來控制文章，十分適合hacker的玩具。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress - 章魚先生，你好]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/03/25/first-trial-on-octopress/"/>
    <updated>2012-03-25T14:05:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/03/25/first-trial-on-octopress</id>
    <content type="html"><![CDATA[<p>被RoR染指了三個禮拜後，開始嘗試轟動台灣萬千RD的&#8221;Octopress&#8221;。感覺，Not BAAAAAAD！如果想找個屎坑來放一些可能沒人看的玩意，可以試試章魚先生。</p>

<p><a href="http://octopress.org"><img class="right" src="http://octopress.org/images/logo.png"></a></p>

<p>在開始之前，需要準備以下工具：</p>

<ul>
<li>Github帳號 (包含git工具，請參考<a href="http://help.github.com/mac-set-up-git/">這裡</a>)</li>
<li>RVM (可以擁有多重Ruby版本的套件，安裝方式可以<a href="http://octopress.org/docs/setup/rvm/">看這</a>)</li>
<li>Ruby 1.9.2 (比較舊版的Ruby，請透過RVM安裝)</li>
<li>(optional) Heroku帳號，用來發佈你的web，也可以發佈到Github。</li>
<li>充滿好奇心的小腦袋</li>
</ul>


<h3>Step 1. Install Ruby</h3>

<pre><code>rvm install 1.9.2
# 下面無法安裝的解法比較花時間，快速的話可以直接下rvm install 1.9.2 --with-gcc=clang
rvm use 1.9.2
</code></pre>

<p>如果是Mac可能會遇到gcc是LLVM裝不上的問題，可以看這篇<a href="http://blog.yorkxin.org/2012/03/09/ruby-192-with-xcode-43/">解法</a>或你覺得時間很寶貴，可以直接下</p>

<pre><code>rvm install 1.9.2 --with-gcc=clang
</code></pre>

<h3>Step 2. Checkout</h3>

<pre><code>cd /PATH/TO/YOUR/DIRECTORY
git clone git://github.com/imathis/octopress.git # 建議可以先將Octopress Fork到自己的帳戶下再Clone，將來如果想修改核心比較方便
</code></pre>

<h3>Step 3. Install Octopress</h3>

<pre><code>cd octopress
bundle install
rake install
</code></pre>

<h3>Step 4. Configure</h3>

<p>剛開始只需要修改_config.yml即可，可參考<a href="http://octopress.org/docs/configuring/">官網config教學</a></p>

<h3>Step 5. Post</h3>

<pre><code>rake new_post[YOUR_POST_NAME]
</code></pre>

<h3>Step 6. Preview</h3>

<pre><code>rake preview
</code></pre>

<p>然後你就可以看到章魚先生在你的電腦上呈現出你的部落格了！接著你可以發佈到Heroku去，詳細步驟可以參考<a href="http://blog.eddie.com.tw/2011/10/11/how-to-install-octopress-on-heroku/">這裡</a></p>

<h3>完成以上步驟，就可以開始拆解這隻章魚了！</h3>

<p>你可以：</p>

<ul>
<li>試試<a href="http://octopress.org/docs/blogging/plugins/">plugins</a></li>
<li>學學<a href="http://daringfireball.net/projects/markdown/syntax">Markdown</a>，畢竟章魚先生的文章都是用Markdown語法寫的</li>
<li>當個安分的部落客好好寫文章</li>
</ul>

]]></content>
  </entry>
  
</feed>

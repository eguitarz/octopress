<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby on Rails | Dale Ma]]></title>
  <link href="http://dale-ma.heroku.com/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://dale-ma.heroku.com/"/>
  <updated>2012-08-02T15:46:58+08:00</updated>
  <id>http://dale-ma.heroku.com/</id>
  <author>
    <name><![CDATA[Dale Ma]]></name>
    <email><![CDATA[dalema22@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[每日定時寄信 in Rails 3]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/06/17/railsscheduler/"/>
    <updated>2012-06-17T16:43:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/06/17/railsscheduler</id>
    <content type="html"><![CDATA[<p>先前研究了如何在 <a href="http://dale-ma.heroku.com/blog/2012/06/12/rails-mail/">rails 3 裡寄 e-mail</a>，後來想要設定成類似 crontab 的方式，每天可以自動寄信出來。</p>

<p>於是開始 google "rails scheduler"，除了火車時刻表以外，發現了一個簡單的 gem - <a href="https://github.com/jmettraux/rufus-scheduler">Rufus Scheduler</a>。我不需要有 queue 之類的進階功能，我要的很簡單，只要每天可以寄出一封信就可以了。</p>

<p>用了之後發現一切真是該死的簡單，如果你已經有設定好 Mailer，不用 3 分鐘就可以搞定一切！</p>

<h2>步驟</h2>

<h3>安裝 Rufus Scheduler</h3>

<p>設定 Gemfile</p>

<pre><code>gem 'rufus-scheduler'
</code></pre>

<p>安裝</p>

<pre><code>bundle install
</code></pre>

<h3>設定 initializer</h3>

<p>建立 .../config/initializers/task_scheduler.rb</p>

<pre><code>scheduler = Rufus::Scheduler.start_new

scheduler.every("10s") do
  UserMailer.convert_result.deliver
end
</code></pre>

<p>設定為每 10 秒寄一次信是為了要可以快速的確認是否 work 。 <code>UserMailer</code>應該換成自己的 Mailer 。</p>

<p>接著可以改成每天固定時間寄信，這裡設定為每天早上 6 點。</p>

<pre><code>scheduler.cron("0 6 * * *") do
   UserMailer.convert_result.deliver
end
</code></pre>

<p>接下來你可以開始你的寄信服務了，不過請別寄垃圾信過來。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 3 如何寄 gmail]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/06/12/railsmail/"/>
    <updated>2012-06-12T17:39:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/06/12/railsmail</id>
    <content type="html"><![CDATA[<p>設定 web 的寄信模組從以往的經驗都不是很輕鬆的事，沒想到在 Rails 3 裡可以不花太多時間就搞定。</p>

<h2>前置作業</h2>

<ul>
<li>一個 gmail 帳號</li>
</ul>


<h2>步驟</h2>

<h3>撰寫設定檔</h3>

<p>在 YOUR_PROJECT/config/initializers 下建立 setup_mail.rb 的文件。</p>

<p>setup_mail.rb</p>

<pre><code>ActionMailer::Base.smtp_settings = {
  :address              =&gt; "smtp.gmail.com",
  :port                 =&gt; 587,
  :domain               =&gt; "YOURDOMAIN.com",
  :user_name            =&gt; "YOUR_GMAIL_ACC",
  :password             =&gt; "YOUR_GMAIL_PWD",
  :authentication       =&gt; "plain",
  :enable_starttls_auto =&gt; true
}
</code></pre>

<h3>建立 mailer</h3>

<pre><code>rails g mailer my_mailer
</code></pre>

<p>將會在你的 app/mailers 下建立一個 my_mailer.rb。</p>

<p>my_mailer.rb初始會長這樣</p>

<pre><code>class MyMailer &lt; ActionMailer::Base
  default :from =&gt; "from@example.com"
end
</code></pre>

<p>改成</p>

<pre><code>class MyMailer &lt; ActionMailer::Base
  def send_mail
    mail(:to =&gt; "YOUR_CLIENT@gmail.com", :subject =&gt; "Bonjour", :from =&gt; "YOUR_GMAIL@gmail.com")
  end
end
</code></pre>

<h3>撰寫郵件內容</h3>

<p>/app/views/my_mailer 下新增 send_mail.text.erb</p>

<p>send_mail.text.erb</p>

<pre><code>Hello world!
</code></pre>

<h3>呼叫寄信函式</h3>

<p>你已經設定完所有要寄信的部分了，接著在要寄信的 Controller 裡 call <code>MyMailer.send_mail.deliver</code> 即可</p>

<p>xxx_controller.rb</p>

<pre><code>def welcome
  MyMailer.send_mail.deliver
end
</code></pre>

<h3>進階</h3>

<p>設定好寄信功能在 rails 3 裡很省事，其它進階的功能項增加附件之類的也不困難，可以參考 <a href="http://asciicasts.com/episodes/206-action-mailer-in-rails-3">Ascii casts</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[文字萃取機]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/04/18/text-extract/"/>
    <updated>2012-04-18T22:01:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/04/18/text-extract</id>
    <content type="html"><![CDATA[<h2>什麼是文字萃取？</h2>

<p>我們每天都要瀏覽很多網頁，每張網頁所含的內容其實有2成以上不是我們在乎的。所以開始有人想把重要的內容從網頁中萃取出來，也就是所謂的 text extracting 。文字萃取有很多方法，其中我比較感興趣的只有兩種，阿基米德法和模擬城市法。（對，名字是我亂取的。）</p>

<h2>阿基米德法</h2>

<p>html 是以 tag 所組成的，將每行 html 所含的文字除上 tag 數，每行可以得到一個比值，再把比值較輕的tag移除（文字含量較少）。跟阿基米德以比重來測量皇冠的真假原理一樣。</p>

<p><img src="http://tomazkovacic.com/blog/wp-content/uploads/2011/03/random17-300x166.png" alt="" /></p>

<p>這是以行數為 x 軸，以比重為 y 軸所得到的對應圖。至於怎樣的數值才算最好，那就真的是一門學問了，每張網頁內容都不盡相同，一不小心就會刪掉太多或是保留太多。</p>

<h2>模擬城市法</h2>

<p>這是將所有 tags 的實際位置算出來，擷取位在中間的區塊。這方法實作上稍難，遇上複雜的網頁結構也會不容易判斷。</p>

<p><img src="http://tomazkovacic.com/blog/wp-content/uploads/2011/03/VIPS-300x270.jpg" alt="" /></p>

<h2>以 Ruby 開發的文字萃取 gem</h2>

<ul>
<li><a href="https://github.com/iterationlabs/ruby-readability">ruby-readability</a></li>
<li><a href="https://github.com/eguitarz/juice">juice</a></li>
</ul>


<p>兩種都是以阿基米德法為基礎所發展，個人偏好 Juice ，因為它可以取出比較完整的內容，據說 juice 的作者是因為不滿意前者的精準度而開發的。（謠言可信度很高，因為我就是作者）</p>

<h2>Juice</h2>

<p>Juice 的演算法不算複雜：</p>

<ol>
<li><p>先濾掉明顯不會是內文的 HTML tags 。例如： &lt;menu>&lt;/menu>, &lt;div class="comment">&lt;/div>, &lt;footer>&lt;/footer></p></li>
<li><p>接著選出 html 樹狀圖中內文較多的分支，把其他分支剔除。</p></li>
<li><p>最後，把選到的分支裡的每個 tag 所含的文字比重拿來算分，低於一定比值的就自動刪掉。</p></li>
</ol>


<p>juice 的 API 十分簡單：</p>

<pre><code>juice = Juice.new(url)
juice.extract

puts juice.title
puts juice.content
</code></pre>

<p>不過目前還是有些網頁編碼會出問題 ，但根源是來自於 nokogiri 沒有處理好，讓作者十分苦惱。</p>

<h3>更強的 Juice ？</h3>

<p>作者正打算透過 Machine Learning 讓 Juice可以有更精準更強大的截取演算法，亦即自動從資料庫中選網頁，萃取後和預期結果比對，如果相似度在一定比例內的話就固定目前的參數，差太遠就微調參數重做，直到找到最佳解為止。</p>

<p>每個無法截取理想內容的網站也會建立 profile ，juice 讀取時會透過專門的參數來讀取這些網站。</p>

<p>聽起來就不是一兩天可以做完的事，也許你能幫作者一臂之力？</p>

<h2>Reference</h2>

<ul>
<li><a href="http://tomazkovacic.com/blog/14/extracting-article-text-from-html-documents/">Overview: Extracting article text from HTML documents | My tech blog.</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gems 混搭空想]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/04/09/mix-gem/"/>
    <updated>2012-04-09T08:43:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/04/09/mix-gem</id>
    <content type="html"><![CDATA[<h2>空想所根據的規則</h2>

<p>Ruby 的 Gems 五花八門，其中不乏很多有特色的 Gems 。常常在想是不是有可能利用這些 Gems 搭出有趣但不一定要實用的服務呢？</p>

<p>大致上， Gems 可以分為 Front-end 和 Back-end 以及 Mixed ，我混搭的第一步就是先搜集一些有趣的Gems，然後再隨機的組合。基本上是從 Front-end 和 Back-end 裡面各抽出一個候選人，接著想想搭在一起會變成什麼玩意。當然，搭出來的可能是狗屁不通的結果，但是，一切都以好玩為出發點。</p>

<h2>Front-end gems</h2>

<p>Front-end 比較偏向內容的呈現，可能是輸出圖形，也可能是輸出文字或是兩者。</p>

<ul>
<li><a href="https://github.com/imathis/octopress">octopress</a>：知名的部落格架站系統</li>
<li><a href="https://github.com/schacon/showoff">showoff</a>：web 介面的投影片</li>
</ul>


<h2>Back-end gems</h2>

<p>Back-end 以 processing 為主，比較沒有花俏的輸出。</p>

<ul>
<li><a href="https://github.com/tenderlove/mechanize">mechanize</a>：爬蟲，抓網頁很強大，可以指定 referer 來抓一些可能會被檔的網頁。</li>
<li><a href="https://github.com/tenderlove/nokogiri">nokogiri</a>：html / xml 分析器，能透過 xpath 或 css selector 輕鬆取代修改文件。</li>
<li><a href="https://github.com/cardinalblue/rest-core">rest-core</a>：和社群網站 api 串接的工具。</li>
</ul>


<h2>開始做夢</h2>

<h3>octomachine</h3>

<p>第一組上場的候選人是 octopress / mechanize ，他們的結晶是 octomachine ！女士們，先生們，你可曾偷別人的文章發表過？有了 octomachine 你不需要辛苦的手動盜文了！ 它會自動定時地去您指定的網站檢查是否有更新，再自動偷文轉貼到您的 octopress 部落格上！</p>

<h3>octogiri</h3>

<p>第二組，octopress / nokogiri ，合稱 octogiri 。可以幫助你分析你的部落格文章用了多少字，多少 html 標籤等等。</p>

<h3>octorest</h3>

<p>第三組 octopress / rest-core 的 octorest 則是讓你的部落格文章可以一鍵發送到各個社群媒體（ Facebook, Twitter, plurk … oh, and google+ ）</p>

<h3>showmachine</h3>

<p>第四組由 showoff / mechanize 組成的 showmachine 是一個即時將指定的部落格轉成投影片的工具，讓您可以隨時介紹自己的部落格(？)</p>

<h3>showgirl</h3>

<p>  第五組， showoff / octogiri 帶來了 showgirl (我沒拼錯，比較喜歡這樣叫～) ，網頁分析報表軟體。以投影片的方式報告網頁有哪些壞連結，有哪些不符合規範的標籤。</p>

<h3>show-rest</h3>

<p>  最後一組， showoff / rest-core ， show-rest ！這可厲害了，可以把你所有的社群訊息轉成投影片，你不需要一一瀏覽不同網站，只要連到你的投影片網址，最新的動態就一張一張地呈現給你看！如果你是宅到爆表的魔人，你絕對要試試這個！</p>

<h2>More?</h2>

<p>  Front-end 和 Back-end gems 未必要各取其一，也可以都是 Front-end 或都是 Back-end，甚至更多。偶爾來些 gems 的腦力激盪，也是蠻不錯的遊戲。說不定，你的下一個產品就是從這種激盪中生出來的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - 6 篇文上軌道]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/03/28/articles-to-rails/"/>
    <updated>2012-03-28T08:55:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/03/28/articles-to-rails</id>
    <content type="html"><![CDATA[<p>你覺得假日生活無聊，想找點新樂子，但聰明如你不想和凡夫俗子一樣在夜店泡上一整晚，也許可以開始Ruby on Railse的學習之路。如果你有網站程式的背景，那底下這幾篇文章大概4小時內就可以消化完畢‧可以學到</p>

<ul>
<li><p>安裝Ruby on Rails的最佳做法</p></li>
<li><p>Ruby的語法</p></li>
<li><p>用Rails框架實做含資料庫的網站</p></li>
<li><p>Rails開發者常用的套件(gems)</p></li>
</ul>


<h3><a href="http://blog.eddie.com.tw/2011/04/08/rvm-and-gemsets/">RVM and Gemsets</a></h3>

<p>RVM是Ruby developer必備的實驗室，可以準備很多不同版本的Ruby來跑Project。每個Project的環境需求都不盡相同，有了RVM就不必煩惱在不同環境間切換的困擾。這篇教你如何安裝RVM。</p>

<h3><a href="http://ihower.tw/rails3/installation.html">安裝Rails開發環境</a></h3>

<p>安裝Rails、資料庫，介紹開發環境和Gems。</p>

<h3><a href="http://www.ruby-lang.org/zh_TW/documentation/quickstart/">二十分鐘 Ruby 體驗</a></h3>

<p>非常精美的Ruby教學文件，讓你知道Ruby可不是珠寶店裡的紅寶石...</p>

<h3><a href="http://ihower.tw/rails3/basic.html">打造 CRUD 應用程式</a></h3>

<p>和下面一篇是連貫的，先實作完這篇的程式，再看下篇。這篇是Rails新手的重點文章。</p>

<h3><a href="http://ihower.tw/rails3/restful.html">RESTful 應用程式</a></h3>

<p>主要是講RESTful在rails下怎麼達成。看完後你已經可以100%唬住Rails門外漢了！</p>

<h3><a href="http://blog.xdite.net/posts/2011/10/09/10-ruby-developer-must-have-tools/">十個 Ruby Web Developer 應該熟悉的工具</a></h3>

<p>我認為Git是裡面最需要也最花時間來熟悉的，git init, git add, git commit, git branch, git checkout等是git很常用到的指令。從svn轉戰git會發現有很多觀念不同，不小心就會誤用。</p>

<h3>More gems…</h3>

<p>Rails有很多前人寫好的套件，花在了解套件的時間上甚至會比寫自己的code還多。</p>

<ul>
<li><a href="https://github.com/chriseppstein/compass">compass</a> (SCSS強化版，簡單想就是用變數和類物件導向的CSS)</li>
<li><a href="https://github.com/plataformatec/devise">devise</a> (認證工具，代表不用刻登入、登出的UI和邏輯，YAY!!)</li>
<li><a href="https://github.com/plataformatec/simple_form">simple_form</a> (堪稱比Rails內建form_for更好用)</li>
<li><a href="https://github.com/amatsuda/kaminari">kaminari</a> (分頁工具，資料多的時候不需要自己寫分頁邏輯)</li>
<li><a href="https://github.com/dchelimsky/rspec">rspec</a> (比unit test更厲害的Behavioral Driven Development測試工具)</li>
<li><a href="https://github.com/cucumber/cucumber">cucumber</a> (Behavioral Driven Development的工具，先讓你寫說明文件再開發，說明文件是程式化的語法，跟rspec是好夥伴)</li>
</ul>


<h3>Fun projects…</h3>

<p><a href="https://github.com/imathis/octopress">octopress</a>
有趣的部落格軟體，不需要用資料庫，而是用git來控制文章，十分適合hacker的玩具。</p>
]]></content>
  </entry>
  
</feed>

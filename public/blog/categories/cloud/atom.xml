<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cloud | Dale Ma]]></title>
  <link href="http://dale-ma.heroku.com/blog/categories/cloud/atom.xml" rel="self"/>
  <link href="http://dale-ma.heroku.com/"/>
  <updated>2012-06-29T06:19:50+08:00</updated>
  <id>http://dale-ma.heroku.com/</id>
  <author>
    <name><![CDATA[Dale Ma]]></name>
    <email><![CDATA[dalema22@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Heartbeat Install Guide]]></title>
    <link href="http://dale-ma.heroku.com/blog/2012/04/04/heartbeat/"/>
    <updated>2012-04-04T00:25:00+08:00</updated>
    <id>http://dale-ma.heroku.com/blog/2012/04/04/heartbeat</id>
    <content type="html"><![CDATA[<h2>What - The use of Heartbeat</h2>

<p>Heartbeat is a High-Availability ( HA ) system which keep service alive. For example, Server_1 has a httpd service, and once if it had been shutdown accidently, then the service will stop. There's a workaround for this situation, prepare Server_2 and duplicate the service settings on it. Install Heartbeat on both of them. When Heartbeat starts working on both servers, it provides a virtual ip. If any one of servers stop working, the other one will takeover the job.</p>

<p>The clients are linking to the virtual ip, they don't know the server has been shutdown. Heartbeat guarantees the service will keep serving clients when any one of its server is alive.</p>

<h2>How - Install Heartbeat</h2>

<h3>Environment</h3>

<p>Server_1</p>

<ul>
<li>CentOS 5.6</li>
<li>ip: 192.168.0.1</li>
</ul>


<p>Server_2</p>

<ul>
<li>CentOS 5.6</li>
<li>ip: 192.168.0.2</li>
</ul>


<p>Virtual ip: 192.168.0.200</p>

<h3>Step 1</h3>

<p>It's really easy to install heartbeat on RHEL5 / CentOS.</p>

<pre><code>wget -O /etc/yum.repos.d/clusterlabs.repo http://clusterlabs.org/rpm/epel-5/clusterlabs.repo
yum install -y heartbeat
</code></pre>

<p>We're going to use httpd for testing, if you don't have thisâ€¦</p>

<pre><code>yum install -y httpd
</code></pre>

<p>NOTICE: Both serevers require heartbeat and httpd be installed.</p>

<h3>Step 2</h3>

<p>Next, copy configurations. NOTICE: Your heartbeat version might be different.</p>

<pre><code>cp /usr/share/doc/heartbeat-3.0.3/authkeys /etc/ha.d/
cp /usr/share/doc/heartbeat-3.0.3/ha.cf /etc/ha.d/
cp /usr/share/doc/heartbeat-3.0.3/haresources /etc/ha.d/
</code></pre>

<h3>Step 3</h3>

<p>Setting up the authkeys</p>

<pre><code>vim /etc/ha.d/authkeys
</code></pre>

<p>Type</p>

<pre><code>auth 1 # auth num
1 md5 dalema # auth num, auth method, auth secret
</code></pre>

<p>Change privilege</p>

<pre><code>chmod 600 /etc/ha.d/authkeys
</code></pre>

<h3>Step 4</h3>

<p>Setting up ha.cf</p>

<p>Append the settings on the tail of ha.cf</p>

<pre><code>logfile /var/log/ha.log
keepalive 2
deadtime 30
initdead 120
bcast eth0
auto_failback on
node Server_1 # Server 1's hostname
node Server_2 # Srever 2's hostname
ping 192.168.0.25 # it's your gateway ip
respawn hacluster /usr/lib64/heartbeat/ipfail
apiauth ipfail gid=haclient uid=hacluster
</code></pre>

<h3>Step 5</h3>

<p>Setting up the haresources.</p>

<p>Append</p>

<pre><code># point current server's httpd service to the virtual ip
Server_1 192.168.0.200
</code></pre>

<h3>Step 6</h3>

<p>Copy settings to Server_2</p>

<pre><code>scp -r /etc/ha.d/ root@192.168.0.2:/etc/
</code></pre>

<h3>Step 7</h3>

<p>Write some html for testing.</p>

<p>On Server_1</p>

<pre><code>echo "It's Server_1, my heart is beating." &gt; /var/www/html/index.html
</code></pre>

<p>On Server_2</p>

<pre><code>echo "It's Server_1, my heart is beating." &gt; /var/www/html/index.html
</code></pre>

<h3>Step 8</h3>

<p>Test heartbeat is working or not.</p>

<p>Start the service on both serevers ( It takes 2 mins )</p>

<pre><code>service heartbeat restart
</code></pre>

<p>or</p>

<pre><code>/etc/init.d/heartbeat start
</code></pre>

<p>Use browser to connect http://192.168.0.1 and http://192.168.0.200,
Both should work well. And http://192.168.0.2 should be no response.</p>

<p>Then shutdown Server_1's heartbeat</p>

<pre><code>service heartbeat stop
</code></pre>

<p>Now, http://192.168.0.2 and http://192.168.0.200 should be workable, and http://192.168.0.1 should be no response.</p>

<p>If you restart the heartbeat on Server_1, the Server_2's job will be taken over by Server_1.</p>

<pre><code>service heartbeat start
</code></pre>

<p>Heartbeat will automatically handle your httpd, you don't have to worry about that. For the clients outside the cluster, they should connect to the virtual ip.</p>

<h2>Troubleshoot</h2>

<p>The udpport default is 694, make sure you did not block it in your firewall.</p>

<p>And make sure your library in ha.cf has right version, 64-bit is /usr/lib64/..., 32-bit is /usr/lib/...</p>

<h2>Resources</h2>

<p>Heartbeat could use with Pacemaker, or use corosync instead of Heartbeat. For more detail, visit</p>

<p><a href="http://www.linux-ha.org/doc/users-guide/users-guide.html">Official Guide</a></p>
]]></content>
  </entry>
  
</feed>
